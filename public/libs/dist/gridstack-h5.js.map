{"version":3,"sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/./src/gridstack-dd.ts","webpack://GridStack/./src/gridstack-ddi.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/h5/dd-base-impl.ts","webpack://GridStack/./src/h5/dd-draggable.ts","webpack://GridStack/./src/h5/dd-droppable.ts","webpack://GridStack/./src/h5/dd-element.ts","webpack://GridStack/./src/h5/dd-manager.ts","webpack://GridStack/./src/h5/dd-resizable-handle.ts","webpack://GridStack/./src/h5/dd-resizable.ts","webpack://GridStack/./src/h5/dd-utils.ts","webpack://GridStack/./src/h5/gridstack-dd-native.ts","webpack://GridStack/./src/index-h5.ts","webpack://GridStack/./src/utils.ts","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","GridStackDD","GridStackDDI","get","el","this","draggable","resizable","gridstackNode","_initDD","GridStack","prototype","_setupAcceptWidget","opts","staticGrid","acceptWidgets","onDrag","event","node","pos","getCellFromPixel","left","pageX","top","pageY","x","Math","max","y","_added","engine","canMoveNode","moveNode","_updateContainerHeight","autoPosition","willItFit","cleanNodes","beginUpdate","addNode","_writeAttrs","placeholder","w","h","appendChild","_beforeDragX","_beforeDragY","droppable","accept","grid","selector","matches","on","_readAttr","round","offsetWidth","cellWidth","offsetHeight","getCellHeight","newNode","prepareNode","_temporary","_isOutOfGrid","_gridstackNodeOrig","off","removeNode","parentNode","remove","helper","wasAdded","parentElement","origNode","oGrid","removedNodes","push","_triggerRemoveEvent","_id","cleanupNode","cloneNode","Utils","removePositioningStyles","_writeAttr","addedNodes","_triggerAddEvent","_triggerChangeEvent","endUpdate","_gsEventHandler","type","undefined","window","setTimeout","_prepareDragDropByNode","_setupRemoveDrop","removable","trashEl","document","querySelector","isDroppable","removableOptions","dataset","inTrashZone","_setupRemovingTimeout","_clearRemovingTimeout","_removeTimeout","classList","add","_isAboutToRemove","removeTimeout","clearTimeout","_setupDragIn","dragIn","isDraggable","dragInOptions","cellHeight","locked","noMove","disableDrag","noResize","disableResize","onStartMoving","ui","target","setAttribute","getAttribute","append","_prevYPix","position","minW","minH","maxW","maxH","dragOrResize","floor","distance","updateScrollPosition","column","float","getRow","_temporaryRemoved","_lastTriedX","_lastTriedY","size","width","height","_lastTriedW","_lastTriedH","onEndMoving","gridToNotify","_resizeNestedGrids","start","stop","drag","resize","movable","els","val","getElements","forEach","pluginClass","ddi","registerPlugin","GridStackEngine","getGridHeight","obsolete","onChange","_float","maxRow","nodes","batchMode","_prevFloat","_packNodes","_notify","_sortNodes","nn","hasLocked","Boolean","find","n","moved","collisionNode","isIntercepted","length","batchUpdate","copyNodes","_dirty","commit","dir","sort","i","_updating","_packY","newY","box","slice","bn","canBeMoved","resizing","_idSeq","defaults","Number","isNaN","min","verify","dirtNodes","_origY","_origX","_origW","_origH","filter","removeDOM","dirtyNodes","Array","isArray","concat","getDirtyNodes","triggerAddEvent","_fixCollisions","triggerEvent","_layouts","isNodeChangedPosition","clonedNode","some","clone","map","canMove","noPack","reduce","memo","saveElement","widgets","key","_ignoreLayoutsNodeChange","layout","l","ratio","oldColumn","cacheLayout","cacheNodes","lastIndex","cacheNode","j","findIndex","newNodes","splice","move","scale","clear","copy","prop","GridDefaults","minRow","itemClass","placeholderClass","placeholderText","handle","handleClass","styleInHead","margin","auto","minWidth","animate","alwaysShowResizeHandle","autoHide","handles","scroll","appendTo","revert","rtl","marginUnit","cellHeightUnit","disableOneColumnMode","oneColumnModeDomSort","obsoleteOpts","obsoleteAttr","row","rowAttr","toNumber","toBool","_styleSheetClass","random","toFixed","initMargin","style","direction","parentGridItemEl","closestByClass","_isNested","subGrid","_isAutoCellHeight","marginDiff","marginRight","marginLeft","marginTop","marginBottom","_setStaticClass","cbNodes","removeChild","_updateStyles","elements","getGridItems","parseInt","e","item","_prepareElement","saveInitial","setAnimation","placeholderChild","createElement","className","innerHTML","_updateWindowResizeEvent","options","elOrString","getGridElement","gridstack","console","error","grids","getGridElements","parent","opt","doc","implementation","createHTMLDocument","body","class","children","init","load","arguments","warn","a","id","addWidget","content","domAttr","_insertNotAppend","prepend","saveContent","saveGridOpt","list","save","sub","o","removeInternalAndSame","addAndRemove","items","_prevColumn","removed","removeWidget","update","addGrid","forcePixel","data","parseHeight","unit","innerWidth","compact","domNodes","updateNodeWidths","from","setStatic","removeAll","_removeStylesheet","enableMove","enableResize","_triggerEvent","doEnable","includeNewWidgets","useDocRelative","containerPos","getBoundingClientRect","documentElement","scrollTop","offsetTop","offsetLeft","relativeLeft","relativeTop","columnWidth","rowHeight","isAreaEmpty","getElement","name","callback","indexOf","split","noData","detail","addEventListener","log","removeEventListener","doAnimate","m","keys","k","changed","ddChanged","value","layoutsNodesChange","CustomEvent","bubbles","Event","dispatchEvent","_styles","removeStylesheet","forceUpdate","prefix","styleLocation","createStylesheet","_max","addCSSRule","bottom","right","getHeight","rows","cssMinHeight","getComputedStyle","String","removeProperty","querySelectorAll","onParentResize","same","attrs","resizeHandles","removeAttribute","hasOwnProperty","classes","clientWidth","throttle","_oneColumnMode","forceRemove","workTodo","_windowResizeBind","bind","margins","Engine","_disabled","_eventRegister","eventName","disabled","DDDraggable","DDBaseImplement","option","super","dragging","containmentRect","offset","_mouseDown","_dragStart","_drag","_dragEnd","_dragFollow","enable","disable","destroy","Object","substring","contains","mouseDownElement","preventDefault","DDManager","dragElement","_createHelper","_setupHelperContainmentStyle","dragOffset","_getDragOffset","helperContainment","ev","DDUtils","initEvent","_setupDragFollowNodeNotifyStart","dragFollowTimer","_cancelDragGhost","_setupHelperStyle","dragEventListenerOption","paintTimer","cancelAnimationFrame","parentOriginStylePosition","_removeHelperStyle","apply","dragElementOriginStyle","originStyleProp","pointerEvents","transition","basePosition","zIndex","requestAnimationFrame","clientX","clientY","match","dataTransfer","setData","effectAllowed","DataTransfer","setDragImage","display","stopPropagation","Image","xformOffsetX","xformOffsetY","testEl","addElStyles","opacity","testElPosition","targetOffset","isEventSupportPassiveOption","capture","passive","DDDroppable","acceptable","_dragEnter","_dragOver","_dragLeave","_drop","_setupAccept","_canDrop","over","_ui","relatedTarget","_removeLeaveCallbacks","out","drop","DDElement","ddElement","ddDraggable","ddDroppable","ddResizable","updateOption","DDResizable","DDResizableHandle","host","mouseMoving","started","_mouseMove","_mouseUp","userSelect","mouseDownEvent","_hasMoved","oEvent","oClientX","oClientY","abs","_showHandlers","_hideHandlers","rect","temporalRect","originalRect","_setupAutoHide","_setupHandlers","_removeHandlers","updateHandles","updateAutoHide","handlerDirection","handlers","trim","_resizeStart","_resizeStop","_resizing","startEvent","_setupHelper","_applyChange","_getChange","_cleanHelper","elOriginStyleVal","_originStyleProp","newRect","offsetH","offsetV","reshape","_getReShapeSize","oWidth","oHeight","maxWidth","maxHeight","minHeight","containmentEl","test","styles","s","info","kbdProps","ptProps","evt","obj","button","which","buttons","cancelable","originEvent","DragEvent","assign","_copyProps","dst","src","props","p","supportsPassive","passiveTest","GridStackDDNative","_getDDElements","dEl","cleanResizable","setupResizable","cleanDraggable","setupDraggable","containment","dragOut","_accept","cleanDroppable","setupDroppable","create","hosts","d","f","oldName","newName","rev","wrapper","args","oldAttr","getElementById","b","widths","styleSheet","cssText","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","rules","addRule","insertRule","v","toLowerCase","Error","parseFloat","sources","source","delay","isWaiting","returnEl","scrollHeight","clientHeight","getScrollParent","innerHeightOrClientHeight","innerHeight","offsetDiffDown","offsetDiffUp","scrollEl","prevScroll","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"gridstack-h5.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, function() {\nreturn ","// gridstack-GridStackDD.get().ts 3.1.2 @preserve\r\n\r\n/**\r\n * https://gridstackjs.com/\r\n * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov\r\n * gridstack.js may be freely distributed under the MIT license.\r\n*/\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\nimport { GridStackDDI } from './gridstack-ddi';\r\nimport { GridItemHTMLElement, GridStackNode, GridStackElement, DDUIData, DDDragInOpt } from './types';\r\nimport { GridStack } from './gridstack';\r\nimport { Utils } from './utils';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n/**\r\n * Base class implementing common Grid drag'n'drop functionality, with domain specific subclass (h5 vs jq subclasses)\r\n */\r\nexport abstract class GridStackDD extends GridStackDDI {\r\n\r\n  /** override to cast to correct type */\r\n  static get(): GridStackDD {\r\n    return GridStackDDI.get() as GridStackDD;\r\n  }\r\n\r\n  /** removes any drag&drop present (called during destroy) */\r\n  public remove(el: GridItemHTMLElement): GridStackDD {\r\n    this.draggable(el, 'destroy').resizable(el, 'destroy');\r\n    if (el.gridstackNode) {\r\n      delete el.gridstackNode._initDD; // reset our DD init flag\r\n    }\r\n    return this;\r\n  }\r\n\r\n  // APIs that must be implemented by subclasses to do actual darg/drop/resize called by GridStack code below\r\n\r\n  public abstract resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract isResizable(el: HTMLElement): boolean;\r\n\r\n  public abstract draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract dragIn(el: GridStackElement, opts: DDDragInOpt): GridStackDD;\r\n\r\n  public abstract isDraggable(el: HTMLElement): boolean;\r\n\r\n  public abstract droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract isDroppable(el: HTMLElement): boolean;\r\n\r\n  public abstract on(el: GridItemHTMLElement, eventName: string, callback: DDCallback): GridStackDD;\r\n\r\n  public abstract off(el: GridItemHTMLElement, eventName: string): GridStackDD;\r\n}\r\n\r\n/********************************************************************************\r\n * GridStack code that is doing drag&drop extracted here so main class is smaller\r\n * for static grid that don't do any of this work anyway. Saves about 10k.\r\n * TODO: no code hint in code below as this is <any> so look at alternatives ?\r\n * https://www.typescriptlang.org/docs/handbook/declaration-merging.html\r\n * https://www.typescriptlang.org/docs/handbook/mixins.html\r\n ********************************************************************************/\r\n\r\n/** @internal called to add drag over support to support widgets */\r\nGridStack.prototype._setupAcceptWidget = function(): GridStack {\r\n  if (this.opts.staticGrid || !this.opts.acceptWidgets) return this;\r\n\r\n  let onDrag = (event, el: GridItemHTMLElement) => {\r\n    let node = el.gridstackNode;\r\n    let pos = this.getCellFromPixel({left: event.pageX, top: event.pageY}, true);\r\n    let x = Math.max(0, pos.x);\r\n    let y = Math.max(0, pos.y);\r\n    if (!node._added) {\r\n      node.x = x;\r\n      node.y = y;\r\n      delete node.autoPosition;\r\n\r\n      // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n      if (!this.engine.willItFit(node)) {\r\n        node.autoPosition = true; // ignore x,y and try for any slot...\r\n        if (!this.engine.willItFit(node)) return; // full grid or can't grow\r\n      }\r\n      node._added = true;\r\n\r\n      node.el = el;\r\n      this.engine.cleanNodes();\r\n      this.engine.beginUpdate(node);\r\n      this.engine.addNode(node);\r\n\r\n      this._writeAttrs(this.placeholder, node.x, node.y, node.w, node.h);\r\n      this.el.appendChild(this.placeholder);\r\n      node.el = this.placeholder; // dom we update while dragging...\r\n      node._beforeDragX = node.x;\r\n      node._beforeDragY = node.y;\r\n\r\n      this._updateContainerHeight();\r\n    } else if ((x !== node.x || y !== node.y) && this.engine.canMoveNode(node, x, y)) {\r\n      this.engine.moveNode(node, x, y);\r\n      this._updateContainerHeight();\r\n    }\r\n  };\r\n\r\n  GridStackDD.get()\r\n    .droppable(this.el, {\r\n      accept: (el: GridItemHTMLElement) => {\r\n        let node: GridStackNode = el.gridstackNode;\r\n        if (node && node.grid === this) {\r\n          return true; // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n        }\r\n        if (typeof this.opts.acceptWidgets === 'function') {\r\n          return this.opts.acceptWidgets(el);\r\n        }\r\n        let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n        return el.matches(selector);\r\n      }\r\n    })\r\n    .on(this.el, 'dropover', (event, el: GridItemHTMLElement) => {\r\n      // ignore drop enter on ourself, and prevent parent from receiving event\r\n      let node = el.gridstackNode;\r\n      if (node && node.grid === this) {\r\n        delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n        return false;\r\n      }\r\n\r\n      // load any element attributes if we don't have a node\r\n      if (!node) {\r\n        node = this._readAttr(el);\r\n      }\r\n\r\n      // if the item came from another grid, let it know it was added here to removed duplicate shadow #393\r\n      if (node.grid && node.grid !== this) {\r\n        node._added = true;\r\n      }\r\n\r\n      // if not calculate the grid size based on element outer size\r\n      let w = node.w || Math.round(el.offsetWidth / this.cellWidth()) || 1;\r\n      let h = node.h || Math.round(el.offsetHeight / this.getCellHeight(true)) || 1;\r\n\r\n      // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n      let newNode = this.engine.prepareNode({...node, ...{w, h, _added: false, _temporary: true}});\r\n      newNode._isOutOfGrid = true;\r\n      el.gridstackNode = newNode;\r\n      el._gridstackNodeOrig = node;\r\n\r\n      GridStackDD.get().on(el, 'drag', onDrag);\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    })\r\n    .on(this.el, 'dropout', (event, el: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      if (!node) { return; }\r\n\r\n      // clear any added flag now that we are leaving #1484\r\n      delete node._added;\r\n\r\n      // jquery-ui bug. Must verify widget is being dropped out\r\n      // check node variable that gets set when widget is out of grid\r\n      if (!node._isOutOfGrid) {\r\n        return;\r\n      }\r\n\r\n      GridStackDD.get().off(el, 'drag');\r\n      node.el = null;\r\n      this.engine.removeNode(node);\r\n      if (this.placeholder.parentNode === this.el) {\r\n        this.placeholder.remove();\r\n      }\r\n      this._updateContainerHeight();\r\n      el.gridstackNode = el._gridstackNodeOrig;\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    })\r\n    .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n      // ignore drop on ourself from ourself - dragend will handle the simple move instead\r\n      if (node && node.grid === this) { return false; }\r\n\r\n      this.placeholder.remove();\r\n\r\n      // notify previous grid of removal\r\n      let origNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n      if (wasAdded && origNode && origNode.grid && origNode.grid !== this) {\r\n        let oGrid = origNode.grid;\r\n        oGrid.placeholder.remove();\r\n        origNode.el = el; // was using placeholder, have it point to node we've moved instead\r\n        oGrid.engine.removedNodes.push(origNode);\r\n        oGrid._triggerRemoveEvent();\r\n      }\r\n\r\n      if (!node) { return false; }\r\n\r\n      // use existing placeholder node as it's already in our list with drop location\r\n      if (wasAdded) {\r\n        const _id = node._id;\r\n        this.engine.cleanupNode(node); // removes all internal _xyz values (including the _id so add that back)\r\n        node._id = _id;\r\n        node.grid = this;\r\n      }\r\n      GridStackDD.get().off(el, 'drag');\r\n      // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n      // as the helper will be nuked by jqueryui otherwise\r\n      if (helper !== el) {\r\n        helper.remove();\r\n        el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n        if (wasAdded) {\r\n          el = el.cloneNode(true) as GridItemHTMLElement;\r\n        }\r\n      } else {\r\n        el.remove(); // reduce flicker as we change depth here, and size further down\r\n        GridStackDD.get().remove(el);\r\n      }\r\n      if (!wasAdded) return false;\r\n      el.gridstackNode = node;\r\n      node.el = el;\r\n\r\n      Utils.removePositioningStyles(el);\r\n      this._writeAttr(el, node);\r\n      this.el.appendChild(el);\r\n      this._updateContainerHeight();\r\n      this.engine.addedNodes.push(node);\r\n      this._triggerAddEvent();\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n      if (this._gsEventHandler['dropped']) {\r\n        this._gsEventHandler['dropped']({type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n      }\r\n\r\n      // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n      // IFF we are still there (some application will use as placeholder and insert their real widget instead)\r\n      window.setTimeout(() => {\r\n        if (node.el && node.el.parentElement) this._prepareDragDropByNode(node);\r\n      });\r\n\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    });\r\n  return this;\r\n}\r\n\r\n/** @internal called to setup a trash drop zone if the user specifies it */\r\nGridStack.prototype._setupRemoveDrop = function(): GridStack {\r\n  if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n    let trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n    if (!trashEl) return this;\r\n    // only register ONE dropover/dropout callback for the 'trash', and it will\r\n    // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n    // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n    if (!GridStackDD.get().isDroppable(trashEl)) {\r\n      GridStackDD.get().droppable(trashEl, this.opts.removableOptions)\r\n        .on(trashEl, 'dropover', function(event, el) { // don't use => notation to avoid using 'this' as grid by mistake...\r\n          let node = el.gridstackNode;\r\n          if (!node || !node.grid) return;\r\n          el.dataset.inTrashZone = 'true';\r\n          node.grid._setupRemovingTimeout(el);\r\n        })\r\n        .on(trashEl, 'dropout', function(event, el) { // same\r\n          let node = el.gridstackNode;\r\n          if (!node || !node.grid) return;\r\n          delete el.dataset.inTrashZone;\r\n          node.grid._clearRemovingTimeout(el);\r\n        });\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\n/** @internal */\r\nGridStack.prototype._setupRemovingTimeout = function(el: GridItemHTMLElement): GridStack {\r\n  let node = el.gridstackNode;\r\n  if (!node || node._removeTimeout || !this.opts.removable) return this;\r\n  node._removeTimeout = window.setTimeout(() => {\r\n    el.classList.add('grid-stack-item-removing');\r\n    node._isAboutToRemove = true;\r\n  }, this.opts.removeTimeout);\r\n  return this;\r\n}\r\n\r\n/** @internal */\r\nGridStack.prototype._clearRemovingTimeout = function(el: GridItemHTMLElement): GridStack {\r\n  let node = el.gridstackNode;\r\n  if (!node || !node._removeTimeout) return this;\r\n  clearTimeout(node._removeTimeout);\r\n  delete node._removeTimeout;\r\n  el.classList.remove('grid-stack-item-removing');\r\n  delete node._isAboutToRemove;\r\n  return this;\r\n}\r\n\r\n/** @internal call to setup dragging in from the outside (say toolbar), with options */\r\nGridStack.prototype._setupDragIn = function():  GridStack {\r\n  if (!this.opts.staticGrid && typeof this.opts.dragIn === 'string') {\r\n    if (!GridStackDD.get().isDraggable(this.opts.dragIn)) {\r\n      GridStackDD.get().dragIn(this.opts.dragIn, this.opts.dragInOptions);\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\n/** @internal prepares the element for drag&drop **/\r\nGridStack.prototype._prepareDragDropByNode = function(node: GridStackNode): GridStack {\r\n  let el = node.el;\r\n\r\n  // check for disabled grid first\r\n  if (this.opts.staticGrid || node.locked ||\r\n    ((node.noMove || this.opts.disableDrag) && (node.noResize || this.opts.disableResize))) {\r\n    if (node._initDD) {\r\n      GridStackDD.get().remove(node.el); // nukes everything instead of just disable, will add some styles back next\r\n      delete node._initDD;\r\n    }\r\n    node.el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n    return this;\r\n  }\r\n  // check if init already done\r\n  if (node._initDD) {\r\n    // fine tune drag vs move by disabling any part...\r\n    if (node.noMove || this.opts.disableDrag) {\r\n      GridStackDD.get().draggable(el, 'disable');\r\n    }\r\n    if (node.noResize || this.opts.disableResize) {\r\n      GridStackDD.get().resizable(el, 'disable');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  // remove our style that look like D&D\r\n  node.el.classList.remove('ui-draggable-disabled', 'ui-resizable-disabled');\r\n\r\n  // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n  let cellWidth: number;\r\n  let cellHeight: number;\r\n\r\n  /** called when item starts moving/resizing */\r\n  let onStartMoving = (event: Event, ui: DDUIData): void => {\r\n    let target = event.target as HTMLElement;\r\n\r\n    // trigger any 'dragstart' / 'resizestart' manually\r\n    if (this._gsEventHandler[event.type]) {\r\n      this._gsEventHandler[event.type](event, target);\r\n    }\r\n\r\n    this.engine.cleanNodes();\r\n    this.engine.beginUpdate(node);\r\n    cellWidth = this.cellWidth();\r\n    cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n\r\n    this.placeholder.setAttribute('gs-x', target.getAttribute('gs-x'));\r\n    this.placeholder.setAttribute('gs-y', target.getAttribute('gs-y'));\r\n    this.placeholder.setAttribute('gs-w', target.getAttribute('gs-w'));\r\n    this.placeholder.setAttribute('gs-h', target.getAttribute('gs-h'));\r\n    this.el.append(this.placeholder);\r\n\r\n    node.el = this.placeholder;\r\n    node._beforeDragX = node.x;\r\n    node._beforeDragY = node.y;\r\n    node._prevYPix = ui.position.top;\r\n\r\n    GridStackDD.get().resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1));\r\n    GridStackDD.get().resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n    // also set max if set #1330\r\n    if (node.maxW) {\r\n      GridStackDD.get().resizable(el, 'option', 'maxWidth', cellWidth * node.maxW);\r\n    }\r\n    if (node.maxH) {\r\n      GridStackDD.get().resizable(el, 'option', 'maxHeight', cellHeight * node.maxH);\r\n    }\r\n  }\r\n\r\n  /** called when item is being dragged/resized */\r\n  let dragOrResize = (event: Event, ui: DDUIData): void => {\r\n    let x = Math.round(ui.position.left / cellWidth);\r\n    let y = Math.floor((ui.position.top + cellHeight / 2) / cellHeight);\r\n    let w: number;\r\n    let h: number;\r\n\r\n    if (event.type === 'drag') {\r\n      let distance = ui.position.top - node._prevYPix;\r\n      node._prevYPix = ui.position.top;\r\n      Utils.updateScrollPosition(el, ui.position, distance);\r\n      // if inTrash, outside of the bounds or added to another grid (#393) temporarily remove it from us\r\n      if (el.dataset.inTrashZone || x < 0 || x >= this.engine.column || y < 0 || (!this.engine.float && y > this.engine.getRow()) || node._added) {\r\n        if (node._temporaryRemoved) return;\r\n        if (this.opts.removable === true) {\r\n          this._setupRemovingTimeout(el);\r\n        }\r\n\r\n        x = node._beforeDragX;\r\n        y = node._beforeDragY;\r\n\r\n        if (this.placeholder.parentNode === this.el) {\r\n          this.placeholder.remove();\r\n        }\r\n        this.engine.removeNode(node);\r\n        this._updateContainerHeight();\r\n\r\n        node._temporaryRemoved = true;\r\n        delete node._added; // no need for this now\r\n      } else {\r\n        this._clearRemovingTimeout(el);\r\n\r\n        if (node._temporaryRemoved) {\r\n          this.engine.addNode(node);\r\n          this._writeAttrs(this.placeholder, x, y, w, h);\r\n          this.el.appendChild(this.placeholder);\r\n          node.el = this.placeholder;\r\n          delete node._temporaryRemoved;\r\n        }\r\n      }\r\n      if (node._lastTriedX === x && node._lastTriedY === y) return;\r\n    } else if (event.type === 'resize')  {\r\n      if (x < 0) return;\r\n      w = Math.round(ui.size.width / cellWidth);\r\n      h = Math.round(ui.size.height / cellHeight);\r\n      if (w === node.w && h === node.h) return;\r\n    }\r\n\r\n    if (!this.engine.canMoveNode(node, x, y, w, h)) return;\r\n    node._lastTriedX = x;\r\n    node._lastTriedY = y;\r\n    node._lastTriedW = w;\r\n    node._lastTriedH = h;\r\n    this.engine.moveNode(node, x, y, w, h);\r\n    this._updateContainerHeight();\r\n  }\r\n\r\n  /** called when the item stops moving/resizing */\r\n  let onEndMoving = (event: Event): void => {\r\n    if (this.placeholder.parentNode === this.el) {\r\n      this.placeholder.remove();\r\n    }\r\n\r\n    // if the item has moved to another grid, we're done here\r\n    let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n    if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n    node.el = target;\r\n\r\n    if (node._isAboutToRemove) {\r\n      let gridToNotify = el.gridstackNode.grid;\r\n      if (gridToNotify._gsEventHandler[event.type]) {\r\n        gridToNotify._gsEventHandler[event.type](event, target);\r\n      }\r\n      gridToNotify.engine.removedNodes.push(node);\r\n      GridStackDD.get().remove(el);\r\n      delete el.gridstackNode; // hint we're removing it next and break circular link\r\n      gridToNotify._triggerRemoveEvent();\r\n      if (el.parentElement) {\r\n        el.remove(); // finally remove it\r\n      }\r\n    } else {\r\n      this._clearRemovingTimeout(el);\r\n      if (!node._temporaryRemoved) {\r\n        Utils.removePositioningStyles(target);\r\n        this._writeAttrs(target, node.x, node.y, node.w, node.h);\r\n      } else {\r\n        Utils.removePositioningStyles(target);\r\n        this._writeAttrs(target, node._beforeDragX, node._beforeDragY, node.w, node.h);\r\n        node.x = node._beforeDragX;\r\n        node.y = node._beforeDragY;\r\n        delete node._temporaryRemoved;\r\n        this.engine.addNode(node);\r\n      }\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, target);\r\n      }\r\n    }\r\n\r\n    this._updateContainerHeight();\r\n    this._triggerChangeEvent();\r\n\r\n    this.engine.endUpdate();\r\n\r\n    // if we re-sized a nested grid item, let the children resize as well\r\n    if (event.type === 'resizestop') {\r\n      this._resizeNestedGrids(target);\r\n    }\r\n  }\r\n\r\n  GridStackDD.get()\r\n    .draggable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      drag: dragOrResize\r\n    })\r\n    .resizable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      resize: dragOrResize\r\n    });\r\n  node._initDD = true; // we've set DD support now\r\n\r\n  // finally fine tune drag vs move by disabling any part...\r\n  if (node.noMove || this.opts.disableDrag) {\r\n    GridStackDD.get().draggable(el, 'disable');\r\n  }\r\n  if (node.noResize || this.opts.disableResize) {\r\n    GridStackDD.get().resizable(el, 'disable');\r\n  }\r\n  return this;\r\n}\r\n\r\n/**\r\n * Enables/Disables moving.\r\n * @param els widget or selector to modify.\r\n * @param val if true widget will be draggable.\r\n */\r\nGridStack.prototype.movable = function(els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) { return this; } // can't move a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node || node.locked) { return }\r\n    node.noMove = !(val || false);\r\n    if (node.noMove) {\r\n      GridStackDD.get().draggable(el, 'disable');\r\n      el.classList.remove('ui-draggable-handle');\r\n    } else {\r\n      this._prepareDragDropByNode(node); // init DD if need be\r\n      GridStackDD.get().draggable(el, 'enable');\r\n      el.classList.remove('ui-draggable-handle');\r\n    }\r\n  });\r\n  return this;\r\n}\r\n\r\n/**\r\n * Enables/Disables resizing.\r\n * @param els  widget or selector to modify\r\n * @param val  if true widget will be resizable.\r\n */\r\nGridStack.prototype.resizable = function(els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) { return this; } // can't resize a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node || node.locked) { return; }\r\n    node.noResize = !(val || false);\r\n    if (node.noResize) {\r\n      GridStackDD.get().resizable(el, 'disable');\r\n    } else {\r\n      this._prepareDragDropByNode(node); // init DD if need be\r\n      GridStackDD.get().resizable(el, 'enable');\r\n    }\r\n  });\r\n  return this;\r\n}\r\n","// gridstack-ddi.ts 3.1.2 @preserve\r\n\r\n/**\r\n * https://gridstackjs.com/\r\n * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov\r\n * gridstack.js may be freely distributed under the MIT license.\r\n*/\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\nimport { GridItemHTMLElement } from './types';\r\n\r\n/**\r\n * Abstract Partial Interface API for drag'n'drop plugin - look at GridStackDD and HTML5 / Jquery implementation versions\r\n */\r\nexport class GridStackDDI {\r\n\r\n  protected static ddi: GridStackDDI;\r\n\r\n  /** call this method to register your plugin instead of the default no-op one */\r\n  static registerPlugin(pluginClass: typeof GridStackDDI): void {\r\n    GridStackDDI.ddi = new pluginClass();\r\n  }\r\n\r\n  /** get the current registered plugin to use */\r\n  static get(): GridStackDDI {\r\n    if (!GridStackDDI.ddi) { GridStackDDI.registerPlugin(GridStackDDI); }\r\n    return GridStackDDI.ddi;\r\n  }\r\n\r\n  /** removes any drag&drop present (called during destroy) */\r\n  public remove(el: GridItemHTMLElement): GridStackDDI {\r\n    return this; // no-op for static grids\r\n  }\r\n}\r\n","// gridstack-engine.ts 3.1.2 @preserve\r\n\r\n/**\r\n * https://gridstackjs.com/\r\n * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov\r\n * gridstack.js may be freely distributed under the MIT license.\r\n*/\r\n\r\nimport { Utils, obsolete } from './utils';\r\nimport { GridStackNode, ColumnOptions, GridStackWidget } from './types';\r\n\r\nexport type onChangeCB = (nodes: GridStackNode[], removeDOM?: boolean) => void;\r\n\r\n/** options used for creations - similar to GridStackOptions */\r\nexport interface GridStackEngineOptions {\r\n  column?: number;\r\n  maxRow?: number;\r\n  float?: boolean;\r\n  nodes?: GridStackNode[];\r\n  onChange?: onChangeCB;\r\n}\r\n\r\n/**\r\n * Defines the GridStack engine that does most no DOM grid manipulation.\r\n * See GridStack methods and vars for descriptions.\r\n *\r\n * NOTE: values should not be modified directly - call the main GridStack API instead\r\n */\r\nexport class GridStackEngine {\r\n  public column: number;\r\n  public maxRow: number;\r\n  public nodes: GridStackNode[];\r\n  public onChange: onChangeCB;\r\n  public addedNodes: GridStackNode[] = [];\r\n  public removedNodes: GridStackNode[] = [];\r\n  public batchMode: boolean;\r\n  /** @internal */\r\n  private _float: boolean;\r\n  /** @internal */\r\n  private _prevFloat: boolean;\r\n  /** @internal */\r\n  private _layouts?: Layout[][]; // maps column # to array of values nodes\r\n  /** @internal */\r\n  private _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  private static _idSeq = 1;\r\n\r\n  public constructor(opts: GridStackEngineOptions = {}) {\r\n    this.column = opts.column || 12;\r\n    this.onChange = opts.onChange;\r\n    this._float = opts.float;\r\n    this.maxRow = opts.maxRow;\r\n    this.nodes = opts.nodes || [];\r\n  }\r\n\r\n  public batchUpdate(): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    this.batchMode = true;\r\n    this._prevFloat = this._float;\r\n    this._float = true; // let things go anywhere for now... commit() will restore and possibly reposition\r\n    return this;\r\n  }\r\n\r\n  public commit(): GridStackEngine {\r\n    if (!this.batchMode) return this;\r\n    this.batchMode = false;\r\n    this._float = this._prevFloat;\r\n    delete this._prevFloat;\r\n    this._packNodes();\r\n    this._notify();\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _fixCollisions(node: GridStackNode): GridStackEngine {\r\n    this._sortNodes(-1);\r\n\r\n    let nn = node;\r\n    let hasLocked = Boolean(this.nodes.find(n => n.locked));\r\n    if (!this.float && !hasLocked) {\r\n      nn = {x: 0, y: node.y, w: this.column, h: node.h};\r\n    }\r\n    while (true) {\r\n      let collisionNode = this.nodes.find( n => n !== node && Utils.isIntercepted(n, nn), {node: node, nn: nn});\r\n      if (!collisionNode) { return this }\r\n      let moved;\r\n      if (collisionNode.locked) {\r\n        // if colliding with a locked item, move ourself instead\r\n        moved = this.moveNode(node, node.x, collisionNode.y + collisionNode.h,\r\n          node.w, node.h, true);\r\n      } else {\r\n        moved = this.moveNode(collisionNode, collisionNode.x, node.y + node.h,\r\n          collisionNode.w, collisionNode.h, true);\r\n      }\r\n      if (!moved) { return this } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\r\n    }\r\n  }\r\n\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\r\n    let collisionNode = this.nodes.find(n => {\r\n      return Utils.isIntercepted(n, nn);\r\n    });\r\n    return !collisionNode;\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStackEngine {\r\n    if (this.nodes.length === 0) { return this }\r\n    this.batchUpdate();\r\n    this._sortNodes();\r\n    let copyNodes = this.nodes;\r\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\r\n    copyNodes.forEach(node => {\r\n      if (!node.noMove && !node.locked) {\r\n        node.autoPosition = true;\r\n      }\r\n      this.addNode(node, false); // 'false' for add event trigger\r\n      node._dirty = true; // force attr update\r\n    });\r\n    this.commit();\r\n    return this;\r\n  }\r\n\r\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\r\n  public set float(val: boolean) {\r\n    if (this._float === val) { return; }\r\n    this._float = val || false;\r\n    if (!val) {\r\n      this._packNodes();\r\n      this._notify();\r\n    }\r\n  }\r\n\r\n  /** float getter method */\r\n  public get float(): boolean { return this._float || false; }\r\n\r\n  /** @internal */\r\n  private _sortNodes(dir?: -1 | 1): GridStackEngine {\r\n    this.nodes = Utils.sort(this.nodes, dir, this.column);\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _packNodes(): GridStackEngine {\r\n    this._sortNodes();\r\n\r\n    if (this.float) {\r\n      this.nodes.forEach((n, i) => {\r\n        if (n._updating || n._packY === undefined || n.y === n._packY) {\r\n          return this;\r\n        }\r\n        let newY = n.y;\r\n        while (newY >= n._packY) {\r\n          let box: GridStackWidget = {x: n.x, y: newY, w: n.w, h: n.h};\r\n          let collisionNode = this.nodes\r\n            .slice(0, i)\r\n            .find(bn => Utils.isIntercepted(box, bn), {n: n, newY: newY});\r\n          if (!collisionNode) {\r\n            n._dirty = true;\r\n            n.y = newY;\r\n          }\r\n          --newY;\r\n        }\r\n      });\r\n    } else {\r\n      this.nodes.forEach((n, i) => {\r\n        if (n.locked) { return this }\r\n        while (n.y > 0) {\r\n          let newY = n.y - 1;\r\n          let canBeMoved = i === 0;\r\n          let box: GridStackWidget = {x: n.x, y: newY, w: n.w, h: n.h};\r\n          if (i > 0) {\r\n            let collisionNode = this.nodes\r\n              .slice(0, i)\r\n              .find(bn => Utils.isIntercepted(box, bn), {n: n, newY: newY});\r\n            canBeMoved = collisionNode === undefined;\r\n          }\r\n\r\n          if (!canBeMoved) { break; }\r\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\r\n          // and move items back. The user 'change' CB should detect changes from the original\r\n          // starting position instead.\r\n          n._dirty = (n.y !== newY);\r\n          n.y = newY;\r\n        }\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\r\n   * @param node to adjust\r\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\r\n   */\r\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\r\n    node = node || {};\r\n    node._id = node._id || GridStackEngine._idSeq++;\r\n\r\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\r\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\r\n      node.autoPosition = true;\r\n    }\r\n\r\n    // assign defaults for missing required fields\r\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\r\n    Utils.defaults(node, defaults);\r\n\r\n    if (!node.autoPosition) { delete node.autoPosition; }\r\n    if (!node.noResize) { delete node.noResize; }\r\n    if (!node.noMove) { delete node.noMove; }\r\n\r\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\r\n    if (typeof node.x == 'string')      { node.x = Number(node.x); }\r\n    if (typeof node.y == 'string')      { node.y = Number(node.y); }\r\n    if (typeof node.w == 'string')  { node.w = Number(node.w); }\r\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\r\n    if (isNaN(node.x))      { node.x = defaults.x; node.autoPosition = true; }\r\n    if (isNaN(node.y))      { node.y = defaults.y; node.autoPosition = true; }\r\n    if (isNaN(node.w))  { node.w = defaults.w; }\r\n    if (isNaN(node.h)) { node.h = defaults.h; }\r\n\r\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\r\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\r\n    if (node.minW) { node.w = Math.max(node.w, node.minW); }\r\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\r\n\r\n    if (node.w > this.column) {\r\n      node.w = this.column;\r\n    } else if (node.w < 1) {\r\n      node.w = 1;\r\n    }\r\n\r\n    if (this.maxRow && node.h > this.maxRow) {\r\n      node.h = this.maxRow;\r\n    } else if (node.h < 1) {\r\n      node.h = 1;\r\n    }\r\n\r\n    if (node.x < 0) {\r\n      node.x = 0;\r\n    }\r\n    if (node.y < 0) {\r\n      node.y = 0;\r\n    }\r\n\r\n    if (node.x + node.w > this.column) {\r\n      if (resizing) {\r\n        node.w = this.column - node.x;\r\n      } else {\r\n        node.x = this.column - node.w;\r\n      }\r\n    }\r\n    if (this.maxRow && node.y + node.h > this.maxRow) {\r\n      if (resizing) {\r\n        node.h = this.maxRow - node.y;\r\n      } else {\r\n        node.y = this.maxRow - node.h;\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\r\n    // compare original X,Y,W,H (or entire node?) instead as _dirty can be a temporary state\r\n    if (verify) {\r\n      let dirtNodes: GridStackNode[] = [];\r\n      this.nodes.forEach(n => {\r\n        if (n._dirty) {\r\n          if (n.y === n._origY && n.x === n._origX && n.w === n._origW && n.h === n._origH) {\r\n            delete n._dirty;\r\n          } else {\r\n            dirtNodes.push(n);\r\n          }\r\n        }\r\n      });\r\n      return dirtNodes;\r\n    }\r\n\r\n    return this.nodes.filter(n => n._dirty);\r\n  }\r\n\r\n  /** @internal */\r\n  private _notify(nodes?: GridStackNode | GridStackNode[], removeDOM = true): GridStackEngine {\r\n    if (this.batchMode) { return this }\r\n    nodes = (nodes === undefined ? [] : (Array.isArray(nodes) ? nodes : [nodes]) );\r\n    let dirtyNodes = nodes.concat(this.getDirtyNodes());\r\n    if (this.onChange) {\r\n      this.onChange(dirtyNodes, removeDOM);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public cleanNodes(): GridStackEngine {\r\n    if (this.batchMode) { return this }\r\n    this.nodes.forEach(n => { delete n._dirty; });\r\n    return this;\r\n  }\r\n\r\n  public addNode(node: GridStackNode, triggerAddEvent = false): GridStackNode {\r\n    node = this.prepareNode(node);\r\n\r\n    if (node.autoPosition) {\r\n      this._sortNodes();\r\n\r\n      for (let i = 0;; ++i) {\r\n        let x = i % this.column;\r\n        let y = Math.floor(i / this.column);\r\n        if (x + node.w > this.column) {\r\n          continue;\r\n        }\r\n        let box = {x, y, w: node.w, h: node.h};\r\n        if (!this.nodes.find(n => Utils.isIntercepted(box, n), {x, y, node})) {\r\n          node.x = x;\r\n          node.y = y;\r\n          delete node.autoPosition; // found our slot\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.nodes.push(node);\r\n    if (triggerAddEvent) {\r\n      this.addedNodes.push(node);\r\n    }\r\n\r\n    this._fixCollisions(node);\r\n    this._packNodes();\r\n    this._notify();\r\n    return node;\r\n  }\r\n\r\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\r\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\r\n      this.removedNodes.push(node);\r\n    }\r\n    node._id = null; // hint that node is being removed\r\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\r\n    this.nodes = this.nodes.filter(n => n !== node);\r\n    if (!this.float) {\r\n      this._packNodes();\r\n    }\r\n    this._notify(node, removeDOM);\r\n    return this;\r\n  }\r\n\r\n  public removeAll(removeDOM = true): GridStackEngine {\r\n    delete this._layouts;\r\n    if (this.nodes.length === 0) { return this }\r\n    if (removeDOM) {\r\n      this.nodes.forEach(n => { n._id = null; }); // hint that node is being removed\r\n    }\r\n    this.removedNodes = this.nodes;\r\n    this.nodes = [];\r\n    this._notify(this.removedNodes, removeDOM);\r\n    return this;\r\n  }\r\n\r\n  public canMoveNode(node: GridStackNode, x: number, y: number, w?: number, h?: number): boolean {\r\n    if (!this.isNodeChangedPosition(node, x, y, w, h)) {\r\n      return false;\r\n    }\r\n    let hasLocked = this.nodes.some(n => n.locked);\r\n\r\n    if (!this.maxRow && !hasLocked) {\r\n      return true;\r\n    }\r\n\r\n    let clonedNode: GridStackNode;\r\n    let clone = new GridStackEngine({\r\n      column: this.column,\r\n      float: this.float,\r\n      nodes: this.nodes.map(n => {\r\n        if (n === node) {\r\n          clonedNode = {...n};\r\n          return clonedNode;\r\n        }\r\n        return {...n};\r\n      })\r\n    });\r\n\r\n    if (!clonedNode) return true;\r\n\r\n    clone.moveNode(clonedNode, x, y, w, h);\r\n\r\n    let canMove = true;\r\n    if (hasLocked) {\r\n      canMove = !clone.nodes.some(n => n.locked && n._dirty && n !== clonedNode);\r\n    }\r\n    if (this.maxRow && canMove) {\r\n      canMove = (clone.getRow() <= this.maxRow);\r\n    }\r\n\r\n    return canMove;\r\n  }\r\n\r\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\r\n  public willItFit(node: GridStackNode): boolean {\r\n    if (!this.maxRow) return true;\r\n\r\n    let clone = new GridStackEngine({\r\n      column: this.column,\r\n      float: this.float,\r\n      nodes: this.nodes.map(n => {return {...n}})\r\n    });\r\n    clone.addNode(node);\r\n    return clone.getRow() <= this.maxRow;\r\n  }\r\n\r\n  public isNodeChangedPosition(node: GridStackNode, x: number, y: number, w?: number, h?: number): boolean {\r\n    if (typeof x !== 'number') { x = node.x; }\r\n    if (typeof y !== 'number') { y = node.y; }\r\n    if (typeof w !== 'number') { w = node.w; }\r\n    if (typeof h !== 'number') { h = node.h; }\r\n\r\n    if (node.maxW) { w = Math.min(w, node.maxW); }\r\n    if (node.maxH) { h = Math.min(h, node.maxH); }\r\n    if (node.minW) { w = Math.max(w, node.minW); }\r\n    if (node.minH) { h = Math.max(h, node.minH); }\r\n\r\n    if (node.x === x && node.y === y && node.w === w && node.h === h) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public moveNode(node: GridStackNode, x: number, y: number, w?: number, h?: number, noPack?: boolean): GridStackNode {\r\n    if (node.locked) { return null; }\r\n    if (typeof x !== 'number') { x = node.x; }\r\n    if (typeof y !== 'number') { y = node.y; }\r\n    if (typeof w !== 'number') { w = node.w; }\r\n    if (typeof h !== 'number') { h = node.h; }\r\n\r\n    // constrain the passed in values and check if we're still changing our node\r\n    let resizing = (node.w !== w || node.h !== h);\r\n    let nn: GridStackNode = { x, y, w, h, maxW: node.maxW, maxH: node.maxH, minW: node.minW, minH: node.minH};\r\n    nn = this.prepareNode(nn, resizing);\r\n    if (node.x === nn.x && node.y === nn.y && node.w === nn.w && node.h === nn.h) {\r\n      return null;\r\n    }\r\n\r\n    node._dirty = true;\r\n\r\n    node.x = node._lastTriedX = nn.x;\r\n    node.y = node._lastTriedY = nn.y;\r\n    node.w = node._lastTriedW = nn.w;\r\n    node.h = node._lastTriedH = nn.h;\r\n\r\n    this._fixCollisions(node);\r\n    if (!noPack) {\r\n      this._packNodes();\r\n      this._notify();\r\n    }\r\n    return node;\r\n  }\r\n\r\n  public getRow(): number {\r\n    return this.nodes.reduce((memo, n) => Math.max(memo, n.y + n.h), 0);\r\n  }\r\n\r\n  public beginUpdate(node: GridStackNode): GridStackEngine {\r\n    if (node._updating) return this;\r\n    node._updating = true;\r\n    this.nodes.forEach(n => { n._packY = n.y; });\r\n    return this;\r\n  }\r\n\r\n  public endUpdate(): GridStackEngine {\r\n    let n = this.nodes.find(n => n._updating);\r\n    if (n) {\r\n      delete n._updating;\r\n      this.nodes.forEach(n => { delete n._packY; });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** saves the current layout returning a list of widgets for serialization */\r\n  public save(saveElement = true): GridStackNode[] {\r\n    let widgets: GridStackNode[] = [];\r\n    Utils.sort(this.nodes);\r\n    this.nodes.forEach(n => {\r\n      let w: GridStackNode = {};\r\n      for (let key in n) { if (key[0] !== '_' && n[key] !== null && n[key] !== undefined ) w[key] = n[key]; }\r\n      // delete other internals\r\n      if (!saveElement) delete w.el;\r\n      delete w.grid;\r\n      // delete default values (will be re-created on read)\r\n      if (!w.autoPosition) delete w.autoPosition;\r\n      if (!w.noResize) delete w.noResize;\r\n      if (!w.noMove) delete w.noMove;\r\n      if (!w.locked) delete w.locked;\r\n      widgets.push(w);\r\n    });\r\n    return widgets;\r\n  }\r\n\r\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\r\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\r\n    if (!this._layouts || this._ignoreLayoutsNodeChange) return this;\r\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\r\n    this._layouts.forEach((layout, column) => {\r\n      if (!layout || column === this.column) return this;\r\n      if (column < this.column) {\r\n        this._layouts[column] = undefined;\r\n      }\r\n      else {\r\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\r\n        // Note: we don't need to check against out of bound scaling/moving as that will be done when using those cache values.\r\n        nodes.forEach(node => {\r\n          let n = layout.find(l => l._id === node._id);\r\n          if (!n) return this; // no cache for new nodes. Will use those values.\r\n          let ratio = column / this.column;\r\n          // Y changed, push down same amount\r\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\r\n          if (node.y !== node._origY) {\r\n            n.y += (node.y - node._origY);\r\n          }\r\n          // X changed, scale from new position\r\n          if (node.x !== node._origX) {\r\n            n.x = Math.round(node.x * ratio);\r\n          }\r\n          // width changed, scale from new width\r\n          if (node.w !== node._origW) {\r\n            n.w = Math.round(node.w * ratio);\r\n          }\r\n          // ...height always carries over from cache\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @internal Called to scale the widget width & position up/down based on the column change.\r\n   * Note we store previous layouts (especially original ones) to make it possible to go\r\n   * from say 12 -> 1 -> 12 and get back to where we were.\r\n   *\r\n   * @param oldColumn previous number of columns\r\n   * @param column  new column number\r\n   * @param nodes different sorted list (ex: DOM order) instead of current list\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public updateNodeWidths(oldColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\r\n    if (!this.nodes.length || oldColumn === column) { return this }\r\n\r\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\r\n    this.cacheLayout(this.nodes, oldColumn);\r\n\r\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\r\n    if (column === 1 && nodes && nodes.length) {\r\n      let top = 0;\r\n      nodes.forEach(n => {\r\n        n.x = 0;\r\n        n.w = 1;\r\n        n.y = Math.max(n.y, top);\r\n        top = n.y + n.h;\r\n      });\r\n    } else {\r\n      nodes = Utils.sort(this.nodes, -1, oldColumn); // current column reverse sorting so we can insert last to front (limit collision)\r\n    }\r\n\r\n    // see if we have cached previous layout.\r\n    let cacheNodes = this._layouts[column] || [];\r\n    // if not AND we are going up in size start with the largest layout as down-scaling is more accurate\r\n    let lastIndex = this._layouts.length - 1;\r\n    if (cacheNodes.length === 0 && column > oldColumn && column < lastIndex) {\r\n      cacheNodes = this._layouts[lastIndex] || [];\r\n      if (cacheNodes.length) {\r\n        // pretend we came from that larger column by assigning those values as starting point\r\n        oldColumn = lastIndex;\r\n        cacheNodes.forEach(cacheNode => {\r\n          let j = nodes.findIndex(n => n._id === cacheNode._id);\r\n          if (j !== -1) {\r\n            // still current, use cache info positions\r\n            nodes[j].x = cacheNode.x;\r\n            nodes[j].y = cacheNode.y;\r\n            nodes[j].w = cacheNode.w;\r\n          }\r\n        });\r\n        cacheNodes = []; // we still don't have new column cached data... will generate from larger one.\r\n      }\r\n    }\r\n\r\n    // if we found cache re-use those nodes that are still current\r\n    let newNodes: GridStackNode[] = [];\r\n    cacheNodes.forEach(cacheNode => {\r\n      let j = nodes.findIndex(n => n._id === cacheNode._id);\r\n      if (j !== -1) {\r\n        // still current, use cache info positions\r\n        nodes[j].x = cacheNode.x;\r\n        nodes[j].y = cacheNode.y;\r\n        nodes[j].w = cacheNode.w;\r\n        newNodes.push(nodes[j]);\r\n        nodes.splice(j, 1);\r\n      }\r\n    });\r\n    // ...and add any extra non-cached ones\r\n    if (nodes.length) {\r\n      if (typeof layout === 'function') {\r\n        layout(column, oldColumn, newNodes, nodes);\r\n      } else {\r\n        let ratio = column / oldColumn;\r\n        let move = (layout === 'move' || layout === 'moveScale');\r\n        let scale = (layout === 'scale' || layout === 'moveScale');\r\n        nodes.forEach(node => {\r\n          node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\r\n          node.w = ((column === 1 || oldColumn === 1) ? 1 :\r\n            scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\r\n          newNodes.push(node);\r\n        });\r\n        nodes = [];\r\n      }\r\n    }\r\n\r\n    // finally re-layout them in reverse order (to get correct placement)\r\n    newNodes = Utils.sort(newNodes, -1, column);\r\n    this._ignoreLayoutsNodeChange = true;\r\n    this.batchUpdate();\r\n    this.nodes = []; // pretend we have no nodes to start with (we use same structures) to simplify layout\r\n    newNodes.forEach(node => {\r\n      this.addNode(node, false); // 'false' for add event trigger\r\n      node._dirty = true; // force attr update\r\n    }, this);\r\n    this.commit();\r\n    delete this._ignoreLayoutsNodeChange;\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to save initial position/size */\r\n  public saveInitial(): GridStackEngine {\r\n    this.nodes.forEach(n => {\r\n      n._origX = n.x;\r\n      n._origY = n.y;\r\n      n._origW = n.w;\r\n      n._origH = n.h;\r\n      delete n._dirty;\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\r\n   * @param nodes list of nodes\r\n   * @param column corresponding column index to save it under\r\n   * @param clear if true, will force other caches to be removed (default false)\r\n   */\r\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\r\n    let copy: Layout[] = [];\r\n    nodes.forEach((n, i) => {\r\n      n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\r\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\r\n    });\r\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\r\n    this._layouts[column] = copy;\r\n    return this;\r\n  }\r\n\r\n\r\n  /** called to remove all internal values */\r\n  public cleanupNode(node: GridStackNode): GridStackEngine {\r\n    for (let prop in node) {\r\n      if (prop[0] === '_') delete node[prop];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal legacy method renames */\r\n  private getGridHeight = obsolete(this, GridStackEngine.prototype.getRow, 'getGridHeight', 'getRow', 'v1.0.0');\r\n}\r\n\r\n/** @internal class to store per column layout bare minimal info (subset of GridStackWidget) */\r\ninterface Layout {\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  _id: number; // so we can find full node back\r\n}\r\n","// gridstack.ts 3.1.2 @preserve\r\n\r\n/**\r\n * https://gridstackjs.com/\r\n * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov\r\n * gridstack.js may be freely distributed under the MIT license.\r\n*/\r\n\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { obsoleteOpts, obsoleteAttr, Utils, HeightData } from './utils';\r\nimport { GridStackElement, GridItemHTMLElement, GridStackWidget, GridStackNode, GridStackOptions, numberOrString, ColumnOptions } from './types';\r\nimport { GridStackDDI } from './gridstack-ddi';\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './gridstack-ddi';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resizestart' | 'resizestop';\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _id?: string; // random id we will use to style us\r\n  _max?: number; // internal tracker of the max # of rows we created\\\r\n}\r\n\r\n// default values for grid options - used during init and when saving out\r\nconst GridDefaults: GridStackOptions = {\r\n  column: 12,\r\n  minRow: 0,\r\n  maxRow: 0,\r\n  itemClass: 'grid-stack-item',\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  handle: '.grid-stack-item-content',\r\n  handleClass: null,\r\n  styleInHead: false,\r\n  cellHeight: 'auto',\r\n  margin: 10,\r\n  auto: true,\r\n  minWidth: 768,\r\n  float: false,\r\n  staticGrid: false,\r\n  animate: true,\r\n  alwaysShowResizeHandle: false,\r\n  resizable: {\r\n    autoHide: true,\r\n    handles: 'se'\r\n  },\r\n  draggable: {\r\n    handle: '.grid-stack-item-content',\r\n    scroll: false,\r\n    appendTo: 'body'\r\n  },\r\n  dragIn: undefined,\r\n  dragInOptions : {\r\n    revert: 'invalid',\r\n    handle: '.grid-stack-item-content',\r\n    scroll: false,\r\n    appendTo: 'body'\r\n  },\r\n  disableDrag: false,\r\n  disableResize: false,\r\n  rtl: 'auto',\r\n  removable: false,\r\n  removableOptions: {\r\n    accept: '.grid-stack-item'\r\n  },\r\n  removeTimeout: 2000,\r\n  marginUnit: 'px',\r\n  cellHeightUnit: 'px',\r\n  disableOneColumnMode: false,\r\n  oneColumnModeDomSort: false\r\n};\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, {...options});\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, {...options});\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) { return null; }\r\n\r\n    // create the grid element\r\n    let doc = document.implementation.createHTMLDocument();\r\n    doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n    let el = doc.body.children[0] as HTMLElement;\r\n    parent.append(el);\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    if (opt.children) {\r\n      grid.load(opt.children);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  /** @internal */\r\n  public placeholder: HTMLElement;\r\n  /** @internal */\r\n  private _oneColumnMode: boolean;\r\n  /** @internal */\r\n  private _prevColumn: number;\r\n  /** @internal */\r\n  private _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  private _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  private _isAutoCellHeight: boolean;\r\n  /** @internal track event binding to window resize so we can remove */\r\n  private _windowResizeBind: () => GridStack;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  private _insertNotAppend: boolean;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    obsoleteOpts(opts, 'verticalMargin', 'margin', 'v2.0');\r\n\r\n    obsoleteAttr(this.el, 'data-gs-current-height', 'gs-current-row', 'v1.0.0');\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // elements attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...GridDefaults,\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || 12,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || 0,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || 0,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || false,\r\n      _styleSheetClass: 'grid-stack-instance-' + (Math.random() * 10000).toFixed(0),\r\n      alwaysShowResizeHandle: opts.alwaysShowResizeHandle || false,\r\n      resizable: {\r\n        autoHide: !(opts.alwaysShowResizeHandle || false),\r\n        handles: 'se'\r\n      },\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || '.grid-stack-item-content',\r\n        scroll: false,\r\n        appendTo: 'body'\r\n      },\r\n      removableOptions: {\r\n        accept: '.' + (opts.itemClass || 'grid-stack-item')\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this.initMargin();\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = el.style.direction === 'rtl';\r\n    }\r\n\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    let parentGridItemEl = Utils.closestByClass(this.el, GridDefaults.itemClass) as GridItemHTMLElement;\r\n    if (parentGridItemEl && parentGridItemEl.gridstackNode) {\r\n      this.opts._isNested = parentGridItemEl.gridstackNode;\r\n      this.opts._isNested.subGrid = this;\r\n      this.el.classList.add('grid-stack-nested');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight) {\r\n      // make the cell content square initially (will use resize event to keep it square)\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      this.cellHeight(this.cellWidth() + marginDiff, false);\r\n    } else {\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    this.el.classList.add(this.opts._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    this.engine = new GridStackEngine({\r\n      column: this.opts.column,\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes, removeDOM = true) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (removeDOM && n._id === null) {\r\n            if (el && el.parentNode) { el.parentNode.removeChild(el) }\r\n          } else {\r\n            this._writeAttrs(el, n.x, n.y, n.w, n.h);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    if (this.opts.auto) {\r\n      let elements: {el: HTMLElement; i: number}[] = [];\r\n      this.getGridItems().forEach(el => {\r\n        let x = parseInt(el.getAttribute('gs-x'));\r\n        let y = parseInt(el.getAttribute('gs-y'));\r\n        elements.push({\r\n          el,\r\n          // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order\r\n          i: (Number.isNaN(x) ? 1000 : x) + (Number.isNaN(y) ? 1000 : y) * this.opts.column\r\n        });\r\n      });\r\n      elements.sort(e => e.i).forEach(item => { this._prepareElement(item.el) });\r\n    }\r\n    this.engine.saveInitial(); // initial start of items\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    let placeholderChild = document.createElement('div');\r\n    placeholderChild.className = 'placeholder-content';\r\n    placeholderChild.innerHTML = this.opts.placeholderText;\r\n    this.placeholder = document.createElement('div');\r\n    this.placeholder.classList.add(this.opts.placeholderClass, defaults.itemClass, this.opts.itemClass);\r\n    this.placeholder.appendChild(placeholderChild);\r\n\r\n    this._updateStyles();\r\n\r\n    this._setupDragIn();\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateWindowResizeEvent(); // finally this may size us down to 1 column\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `addWidget(el, x, y, width...)` is deprecated. Use `addWidget({x, y, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1,\r\n        opt: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++],\r\n          minW:a[i++], maxW:a[i++], minH:a[i++], maxH:a[i++], id:a[i++] };\r\n      return this.addWidget(els, opt);\r\n    }\r\n\r\n    function isGridStackWidget(w: GridStackWidget): w is GridStackWidget { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: HTMLElement;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument();\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      let content = els ? (els as GridStackWidget).content || '' : '';\r\n      options = els;\r\n      let doc = document.implementation.createHTMLDocument();\r\n      doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz) before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = {...(options || {})};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id\r\n    this._prepareElement(el, true, options);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization (with default to save content), which might include any nested grids.\r\n   * Optionally you can also save the grid with options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list.\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false): GridStackWidget[] | GridStackOptions {\r\n    // return copied nodes we can modify at will...\r\n    let list = this.engine.save(saveContent);\r\n\r\n    // check for HTML content as well\r\n    if (saveContent) {\r\n      list.forEach(n => {\r\n        if (n.el) {\r\n          let sub = n.el.querySelector('.grid-stack-item-content');\r\n          n.content = sub ? sub.innerHTML : undefined;\r\n          if (!n.content) delete n.content;\r\n          delete n.el;\r\n        }\r\n      });\r\n    }\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n\r\n      // check for nested grid\r\n      list.forEach(n => {\r\n        if (n.subGrid) {\r\n          n.subGrid = (n.subGrid as GridStack).save(saveContent, true) as GridStackOptions;\r\n        }\r\n      })\r\n\r\n      let o: GridStackOptions = {...this.opts};\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) { o.cellHeight = 'auto' }\r\n      Utils.removeInternalAndSame(o, GridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   **/\r\n  public load(layout: GridStackWidget[], addAndRemove: boolean | ((g: GridStack, w: GridStackWidget, add: boolean) => GridItemHTMLElement)  = true): GridStack {\r\n    let items = GridStack.Utils.sort(layout, -1, this._prevColumn || this.opts.column);\r\n    this._insertNotAppend = true; // since create in reverse order...\r\n\r\n    // if we're loading a layout into 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => (n.x + n.w) > this.opts.column)) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addAndRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (typeof(addAndRemove) === 'function') {\r\n            addAndRemove(this, n, false);\r\n          } else {\r\n            removed.push(n); // batch keep track\r\n            this.removeWidget(n.el, true, false);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets\r\n    items.forEach(w => {\r\n      let item = (w.id || w.id === 0) ? this.engine.nodes.find(n => n.id === w.id) : undefined;\r\n      if (item) {\r\n        this.update(item.el, w);\r\n        if (w.subGrid && (w.subGrid as GridStackOptions).children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load((w.subGrid as GridStackOptions).children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addAndRemove) {\r\n        if (typeof(addAndRemove) === 'function') {\r\n          w = addAndRemove(this, w, true).gridstackNode;\r\n        } else {\r\n          w = this.addWidget(w).gridstackNode;\r\n        }\r\n        if (w.subGrid) { // see if there is a sub-grid to create too\r\n          let content = w.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n          w.subGrid = GridStack.addGrid(content, w.subGrid as GridStackOptions);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.commit();\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Initializes batch updates. You will see no changes until `commit()` method is called.\r\n   */\r\n  public batchUpdate(): GridStack {\r\n    this.engine.batchUpdate();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else get first cell height\r\n    // or do entire grid and # of rows ? (this.el.getBoundingClientRect().height) / parseInt(this.el.getAttribute('gs-current-row'))\r\n    let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    let height = Utils.toNumber(el.getAttribute('gs-h'));\r\n    return Math.round(el.offsetHeight / height);\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val: numberOrString, update = true): GridStack {\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    if (update) {\r\n      this._updateStyles(true); // true = force re-create\r\n    }\r\n    this._resizeNestedGrids(this.el);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell width.\r\n   */\r\n  public cellWidth(): number {\r\n    // use parent width if we're 0 (no size yet)\r\n    return (this.el.offsetWidth || this.el.parentElement.offsetWidth || window.innerWidth) / this.opts.column;\r\n  }\r\n\r\n  /**\r\n   * Finishes batch updates. Updates DOM nodes. You must call it after batchUpdate.\r\n   */\r\n  public commit(): GridStack {\r\n    this.engine.commit();\r\n    this._triggerRemoveEvent();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStack {\r\n    this.engine.compact();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (this.opts.column === column) { return this; }\r\n    let oldColumn = this.opts.column;\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('grid-stack-' + oldColumn);\r\n    this.el.classList.add('grid-stack-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => {\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.updateNodeWidths(oldColumn, column, domNodes, layout);\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) { return; } // prevent multiple calls\r\n    this._updateWindowResizeEvent(true);\r\n    this.setStatic(true); // permanently removes DD\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this.opts._styleSheetClass);\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    delete this.opts._isNested;\r\n    delete this.opts;\r\n    delete this.placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   */\r\n  public disable(): GridStack {\r\n    if (this.opts.staticGrid) { return; }\r\n    this.enableMove(false);\r\n    this.enableResize(false);\r\n    this._triggerEvent('disable');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   */\r\n  public enable(): GridStack {\r\n    if (this.opts.staticGrid) { return; }\r\n    this.enableMove(true);\r\n    this.enableResize(true);\r\n    this._triggerEvent('enable');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids.\r\n   *\r\n   * @param doEnable\r\n   * @param includeNewWidgets will force new widgets to be draggable as per\r\n   * doEnable`s value by changing the disableDrag grid option (default: true).\r\n   */\r\n  public enableMove(doEnable: boolean, includeNewWidgets = true): GridStack {\r\n    if (this.opts.staticGrid) { return this; } // can't move a static grid!\r\n    this.getGridItems().forEach(el => this.movable(el, doEnable));\r\n    if (includeNewWidgets) {\r\n      this.opts.disableDrag = !doEnable;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   * @param doEnable\r\n   * @param includeNewWidgets will force new widgets to be draggable as per\r\n   * doEnable`s value by changing the disableResize grid option (default: true).\r\n   */\r\n  public enableResize(doEnable: boolean, includeNewWidgets = true): GridStack {\r\n    if (this.opts.staticGrid) { return this; } // can't size a static grid!\r\n    this.getGridItems().forEach(el => this.resizable(el, doEnable));\r\n    if (includeNewWidgets) {\r\n      this.opts.disableResize = !doEnable;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    /*\r\n    if (val === undefined) {\r\n      // TODO: should we support and/or change signature ? figure this soon...\r\n      console.warn('gridstack.ts: getter `float()` is deprecated in 2.x and has been replaced by `getFloat()`. It will be **completely** removed soon');\r\n      return this.getFloat();\r\n    }\r\n    */\r\n    this.engine.float = val;\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos;\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.opts.column);\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"gsi-1\" gs-w=\"3\"></div>');\r\n   * grid.makeWidget('#gsi-1');\r\n   */\r\n  public makeWidget(els: GridStackElement): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public on(name: GridStackEvent, callback: (event: Event, arg2?: GridItemHTMLElement | GridStackNode[]) => void): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => callback(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => callback(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resizestop' || name === 'dropped') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      GridStackDDI.get().remove(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      GridStackDDI.get().remove(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   */\r\n  public setStatic(val: boolean): GridStack {\r\n    if (this.opts.staticGrid === val) { return this; }\r\n    this.opts.staticGrid = val;\r\n    this.engine.nodes.forEach(n => this._prepareDragDropByNode(n)); // either delete Drag&drop or initialize it\r\n    this._setStaticClass();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update({x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (!el || !el.gridstackNode) { return; }\r\n      let n = el.gridstackNode;\r\n      let w = {...opt}; // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content) {\r\n        let sub = el.querySelector('.grid-stack-item-content');\r\n        if (sub && sub.innerHTML !== w.content) {\r\n          sub.innerHTML = w.content;\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n\r\n      // finally move the widget\r\n      if (m) {\r\n        this.engine.cleanNodes();\r\n        this.engine.beginUpdate(n);\r\n        this.engine.moveNode(n, m.x, m.y, m.w, m.h);\r\n        this._updateContainerHeight();\r\n        this._triggerChangeEvent();\r\n        this.engine.endUpdate();\r\n      }\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this.initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) { return this; }\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) { return this }\r\n    if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) { return this; }\r\n    if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerEvent(name: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(name, {bubbles: false, detail: data}) : new Event(name);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  private _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styles._id);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  private _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this.opts._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      let id = 'gridstack-style-' + (Math.random() * 100000).toFixed();\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(id, styleLocation);\r\n      if (!this._styles) { return this; }\r\n      this._styles._id = id;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this.opts._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        let h: string = getHeight(i);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i-1}\"]`,        `top: ${getHeight(i-1)}`); // start at 0\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i}\"]`,     `height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-min-h=\"${i}\"]`, `min-height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-max-h=\"${i}\"]`, `max-height: ${h}`);\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) { return this; }\r\n    let row = this.getRow(); // checks for minRow already\r\n    // check for css min height\r\n    let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n    if (cssMinHeight > 0) {\r\n      let minRow = Math.round(cssMinHeight / this.getCellHeight(true));\r\n      if (row < minRow) {\r\n        row = minRow;\r\n      }\r\n    }\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    if (row === 0) {\r\n      this.el.style.removeProperty('height');\r\n      return this;\r\n    }\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) { return this }\r\n    this.el.style.height = row * cellHeight + unit;\r\n    return this;\r\n  }\r\n\r\n  /** called to resize children nested grids when we/item resizes */\r\n  private _resizeNestedGrids(target: HTMLElement): GridStack {\r\n    target.querySelectorAll('.grid-stack').forEach((el: GridHTMLElement) => {\r\n      if (el.gridstack) {\r\n        el.gridstack.onParentResize();\r\n      }});\r\n    return this;\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  private _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    if (!node) {\r\n      el.classList.add(this.opts.itemClass);\r\n      node = this._readAttr(el);\r\n    }\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write x,y,w,h attributes back to element */\r\n  private _writeAttrs(el: HTMLElement, x?: number, y?: number, w?: number, h?: number): GridStack {\r\n    if (x !== undefined && x !== null) { el.setAttribute('gs-x', String(x)); }\r\n    if (y !== undefined && y !== null) { el.setAttribute('gs-y', String(y)); }\r\n    if (w) { el.setAttribute('gs-w', String(w)); }\r\n    if (h) { el.setAttribute('gs-h', String(h)); }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  private _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writeAttrs(el, node.x, node.y, node.w, node.h);\r\n\r\n    let attrs /*: like GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      minW: 'gs-min-w',\r\n      minH: 'gs-min-h',\r\n      maxW: 'gs-max-w',\r\n      maxH: 'gs-max-h',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n      resizeHandles: 'gs-resize-handles'\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  private _readAttr(el: HTMLElement): GridStackWidget {\r\n    let node: GridStackNode = {};\r\n    node.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    node.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    node.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    node.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    node.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    node.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    node.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    node.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n    node.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    node.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    node.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    node.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    node.resizeHandles = el.getAttribute('gs-resize-handles');\r\n    node.id = el.getAttribute('gs-id');\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in node) {\r\n      if (!node.hasOwnProperty(key)) { return; }\r\n      if (!node[key] && node[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete node[key];\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /** @internal */\r\n  private _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, as well as check for auto cell height (square)\r\n   */\r\n  public onParentResize(): GridStack {\r\n    if (!this.el || !this.el.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n\r\n    // make the cells content (minus margin) square again\r\n    if (this._isAutoCellHeight) {\r\n      Utils.throttle(() => {\r\n        let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n          + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n        this.cellHeight(this.cellWidth() + marginDiff);\r\n      }, 100);\r\n    }\r\n\r\n    if (!this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.minWidth) {\r\n      if (this._oneColumnMode) { return this }\r\n      this._oneColumnMode = true;\r\n      this.column(1);\r\n      this._resizeNestedGrids(this.el);\r\n    } else {\r\n      if (!this._oneColumnMode) { return this }\r\n      delete this._oneColumnMode;\r\n      this.column(this._prevColumn);\r\n      this._resizeNestedGrids(this.el);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** add or remove the window size event handler */\r\n  private _updateWindowResizeEvent(forceRemove = false): GridStack {\r\n    const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode);\r\n\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    if (workTodo && !forceRemove && !this.opts._isNested && !this._windowResizeBind) {\r\n      this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\r\n      window.addEventListener('resize', this._windowResizeBind);\r\n      this.onParentResize(); // initially call it once...\r\n    } else if ((forceRemove || !workTodo) && this._windowResizeBind) {\r\n      window.removeEventListener('resize', this._windowResizeBind);\r\n      delete this._windowResizeBind; // remove link to us so we can free\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  private initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /*\r\n   * drag&drop empty stubs that will be implemented in gridstack-dd.ts for non static grid\r\n   * so we don't incur the load unless needed.\r\n   * NOTE: had to make those methods public in order to define them else as\r\n   *   GridStack.prototype._setupAcceptWidget = function()\r\n   * maybe there is a better way....\r\n   */\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\n  /**\r\n   * Enables/Disables moving. No-op for static grids.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack { return this; }\r\n  /**\r\n   * Enables/Disables resizing. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack { return this; }\r\n  /** @internal called to add drag over support to support widgets */\r\n  public _setupAcceptWidget(): GridStack { return this; }\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  public _setupRemoveDrop(): GridStack { return this; }\r\n  /** @internal */\r\n  public _setupRemovingTimeout(el: GridItemHTMLElement): GridStack { return this; }\r\n  /** @internal */\r\n  public _clearRemovingTimeout(el: GridItemHTMLElement): GridStack { return this; }\r\n  /** @internal call to setup dragging in from the outside (say toolbar), with options */\r\n  public _setupDragIn():  GridStack {return this; }\r\n  /** @internal prepares the element for drag&drop **/\r\n  public _prepareDragDropByNode(node: GridStackNode): GridStack { return this; }\r\n\r\n  // 2.x API that just calls the new and better update() - keep those around for backward compat only...\r\n  /** @internal */\r\n  public locked(els: GridStackElement, locked: boolean): GridStack { return this.update(els, {locked}) }\r\n  /** @internal */\r\n  public maxWidth(els: GridStackElement, maxW: number): GridStack { return this.update(els, {maxW}) }\r\n  /** @internal */\r\n  public minWidth(els: GridStackElement, minW: number): GridStack {  return this.update(els, {minW}) }\r\n  /** @internal */\r\n  public maxHeight(els: GridStackElement, maxH: number): GridStack { return this.update(els, {maxH}) }\r\n  /** @internal */\r\n  public minHeight(els: GridStackElement, minH: number): GridStack { return this.update(els, {minH}) }\r\n  /** @internal */\r\n  public move(els: GridStackElement, x?: number, y?: number): GridStack { return this.update(els, {x, y}) }\r\n  /** @internal */\r\n  public resize(els: GridStackElement, w?: number, h?: number): GridStack { return this.update(els, {w, h}) }\r\n}\r\n","// dd-base-impl.ts 3.1.2 @preserve\n\n/**\n * https://gridstackjs.com/\n * (c) 2020 rhlin, Alain Dumesny\n * gridstack.js may be freely distributed under the MIT license.\n*/\nexport type EventCallback = (event: Event) => boolean|void;\nexport abstract class DDBaseImplement {\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n  public get disabled(): boolean   { return this._disabled; }\n\n  /** @internal */\n  private _disabled = false;\n  /** @internal */\n  private _eventRegister: {\n    [eventName: string]: EventCallback;\n  } = {};\n\n  public on(event: string, callback: EventCallback): void {\n    this._eventRegister[event] = callback;\n  }\n\n  public off(event: string): void {\n    delete this._eventRegister[event];\n  }\n\n  public enable(): void {\n    this._disabled = false;\n  }\n\n  public disable(): void {\n    this._disabled = true;\n  }\n\n  public destroy(): void {\n    delete this._eventRegister;\n  }\n\n  public triggerEvent(eventName: string, event: Event): boolean|void {\n    if (this.disabled) { return; }\n    if (!this._eventRegister) {return; } // used when destroy before triggerEvent fire\n    if (this._eventRegister[eventName]) {\n      return this._eventRegister[eventName](event);\n    }\n  }\n}\n\nexport interface HTMLElementExtendOpt<T> {\n  el: HTMLElement;\n  option: T;\n  updateOption(T): DDBaseImplement;\n}\n","// dd-draggable.ts 3.1.2 @preserve\n\n/**\n * https://gridstackjs.com/\n * (c) 2020 rhlin, Alain Dumesny\n * gridstack.js may be freely distributed under the MIT license.\n*/\nimport { DDManager } from './dd-manager';\nimport { DDUtils } from './dd-utils';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { GridItemHTMLElement, DDUIData } from '../types';\n\n// TODO: merge with DDDragOpt ?\nexport interface DDDraggableOpt {\n  appendTo?: string | HTMLElement;\n  containment?: string | HTMLElement; // TODO: not implemented yet\n  handle?: string;\n  revert?: string | boolean | unknown; // TODO: not implemented yet\n  scroll?: boolean; // nature support by HTML5 drag drop, can't be switch to off actually\n  helper?: string | HTMLElement | ((event: Event) => HTMLElement);\n  basePosition?: 'fixed' | 'absolute';\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  drag?: (event: Event, ui: DDUIData) => void;\n}\n\ninterface DragOffset {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  offsetLeft: number;\n  offsetTop: number;\n}\n\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDraggableOpt> {\n  public el: HTMLElement;\n  public option: DDDraggableOpt;\n  public helper: HTMLElement; // used by GridStackDDNative\n\n  /** @internal */\n  private dragOffset: DragOffset;\n  /** @internal */\n  private dragElementOriginStyle: Array<string>;\n  /** @internal */\n  private dragFollowTimer: number;\n  /** @internal */\n  private mouseDownElement: HTMLElement;\n  /** @internal */\n  private dragging = false;\n  /** @internal */\n  private paintTimer: number;\n  /** @internal */\n  private parentOriginStylePosition: string;\n  /** @internal */\n  private helperContainment: HTMLElement;\n  /** @internal */\n  private static basePosition: 'fixed' | 'absolute' = 'absolute';\n  /** @internal */\n  private static dragEventListenerOption = DDUtils.isEventSupportPassiveOption ? { capture: true, passive: true } : true;\n  /** @internal */\n  private static originStyleProp = ['transition', 'pointerEvents', 'position',\n    'left', 'top', 'opacity', 'zIndex', 'width', 'height', 'willChange'];\n\n  constructor(el: HTMLElement, option: DDDraggableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = option;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._dragStart = this._dragStart.bind(this);\n    this._drag = this._drag.bind(this);\n    this._dragEnd = this._dragEnd.bind(this);\n    this._dragFollow = this._dragFollow.bind(this);\n\n    this.el.draggable = true;\n    this.el.classList.add('ui-draggable');\n    this.el.addEventListener('mousedown', this._mouseDown);\n    this.el.addEventListener('dragstart', this._dragStart);\n  }\n\n  public on(event: 'drag' | 'dragstart' | 'dragstop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drag' | 'dragstart' | 'dragstop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.el.draggable = true;\n    this.el.classList.remove('ui-draggable-disabled');\n  }\n\n  public disable(): void {\n    super.disable();\n    this.el.draggable = false;\n    this.el.classList.add('ui-draggable-disabled');\n  }\n\n  public destroy(): void {\n    if (this.dragging) {\n      // Destroy while dragging should remove dragend listener and manually trigger\n      // dragend, otherwise dragEnd can't perform dragstop because eventRegistry is\n      // destroyed.\n      this._dragEnd({} as DragEvent);\n    }\n    this.el.draggable = false;\n    this.el.classList.remove('ui-draggable');\n    this.el.removeEventListener('mousedown', this._mouseDown);\n    this.el.removeEventListener('dragstart', this._dragStart);\n    delete this.el;\n    delete this.helper;\n    delete this.option;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDraggableOpt): DDDraggable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    return this;\n  }\n\n  /** @internal call when mouse goes down before a dragstart happens */\n  private _mouseDown(event: MouseEvent): void {\n    // make sure we are clicking on a drag handle or child of it...\n    let className = this.option.handle.substring(1);\n    let el = event.target as HTMLElement;\n    while (el && !el.classList.contains(className)) { el = el.parentElement; }\n    this.mouseDownElement = el;\n  }\n\n  /** @internal */\n  private _dragStart(event: DragEvent): void {\n    if (!this.mouseDownElement) { event.preventDefault();  return; }\n    DDManager.dragElement = this;\n    this.helper = this._createHelper(event);\n    this._setupHelperContainmentStyle();\n    this.dragOffset = this._getDragOffset(event, this.el, this.helperContainment);\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dragstart' });\n    if (this.helper !== this.el) {\n      this._setupDragFollowNodeNotifyStart(ev);\n    } else {\n      this.dragFollowTimer = window.setTimeout(() => {\n        delete this.dragFollowTimer;\n        this._setupDragFollowNodeNotifyStart(ev);\n      }, 0);\n    }\n    this._cancelDragGhost(event);\n  }\n\n  /** @internal */\n  private _setupDragFollowNodeNotifyStart(ev: Event): DDDraggable {\n    this._setupHelperStyle();\n    document.addEventListener('dragover', this._drag, DDDraggable.dragEventListenerOption);\n    this.el.addEventListener('dragend', this._dragEnd);\n    if (this.option.start) {\n      this.option.start(ev, this.ui());\n    }\n    this.dragging = true;\n    this.helper.classList.add('ui-draggable-dragging');\n    this.triggerEvent('dragstart', ev);\n    return this;\n  }\n\n  /** @internal */\n  private _drag(event: DragEvent): void {\n    this._dragFollow(event);\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'drag' });\n    if (this.option.drag) {\n      this.option.drag(ev, this.ui());\n    }\n    this.triggerEvent('drag', ev);\n  }\n\n  /** @internal */\n  private _dragEnd(event: DragEvent): void {\n    if (this.dragFollowTimer) {\n      clearTimeout(this.dragFollowTimer);\n      delete this.dragFollowTimer;\n      return;\n    } else {\n      if (this.paintTimer) {\n        cancelAnimationFrame(this.paintTimer);\n      }\n      document.removeEventListener('dragover', this._drag, DDDraggable.dragEventListenerOption);\n      this.el.removeEventListener('dragend', this._dragEnd);\n    }\n    this.dragging = false;\n    this.helper.classList.remove('ui-draggable-dragging');\n    this.helperContainment.style.position = this.parentOriginStylePosition || null;\n    if (this.helper === this.el) {\n      this._removeHelperStyle();\n    } else {\n      this.helper.remove();\n    }\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dragstop' });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.triggerEvent('dragstop', ev);\n    delete DDManager.dragElement;\n    delete this.helper;\n    delete this.mouseDownElement;\n  }\n\n  /** @internal */\n  private _createHelper(event: DragEvent): HTMLElement {\n    const helperIsFunction = (typeof this.option.helper) === 'function';\n    const helper = (helperIsFunction\n      ? (this.option.helper as ((event: Event) => HTMLElement)).apply(this.el, [event])\n      : (this.option.helper === \"clone\" ? DDUtils.clone(this.el) : this.el)\n    ) as HTMLElement;\n    if (!document.body.contains(helper)) {\n      DDUtils.appendTo(helper, (this.option.appendTo === \"parent\"\n        ? this.el.parentNode\n        : this.option.appendTo));\n    }\n    if (helper === this.el) {\n      this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n    }\n    return helper;\n  }\n\n  /** @internal */\n  private _setupHelperStyle(): DDDraggable {\n    this.helper.style.pointerEvents = 'none';\n    this.helper.style.width = this.dragOffset.width + 'px';\n    this.helper.style.height = this.dragOffset.height + 'px';\n    this.helper.style['willChange'] = 'left, top';\n    this.helper.style.transition = 'none'; // show up instantly\n    this.helper.style.position = this.option.basePosition || DDDraggable.basePosition;\n    this.helper.style.zIndex = '1000';\n    setTimeout(() => {\n      if (this.helper) {\n        this.helper.style.transition = null; // recover animation\n      }\n    }, 0);\n    return this;\n  }\n\n  /** @internal */\n  private _removeHelperStyle(): DDDraggable {\n    // don't bother restoring styles if we're gonna remove anyway...\n    let node = this.helper ? (this.helper as GridItemHTMLElement).gridstackNode : undefined;\n    if (!node || !node._isAboutToRemove) {\n      DDDraggable.originStyleProp.forEach(prop => {\n        this.helper.style[prop] = this.dragElementOriginStyle[prop] || null;\n      });\n    }\n    delete this.dragElementOriginStyle;\n    return this;\n  }\n\n  /** @internal */\n  private _dragFollow(event: DragEvent): void {\n    if (this.paintTimer) {\n      cancelAnimationFrame(this.paintTimer);\n    }\n    this.paintTimer = requestAnimationFrame(() => {\n      delete this.paintTimer;\n      const offset = this.dragOffset;\n      let containmentRect = { left: 0, top: 0 };\n      if (this.helper.style.position === 'absolute') {\n        const { left, top } = this.helperContainment.getBoundingClientRect();\n        containmentRect = { left, top };\n      }\n      this.helper.style.left = event.clientX + offset.offsetLeft - containmentRect.left + 'px';\n      this.helper.style.top = event.clientY + offset.offsetTop - containmentRect.top + 'px';\n    });\n  }\n\n  /** @internal */\n  private _setupHelperContainmentStyle(): DDDraggable {\n    this.helperContainment = this.helper.parentElement;\n    if (this.option.basePosition !== 'fixed') {\n      this.parentOriginStylePosition = this.helperContainment.style.position;\n      if (window.getComputedStyle(this.helperContainment).position.match(/static/)) {\n        this.helperContainment.style.position = 'relative';\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _cancelDragGhost(e: DragEvent): DDDraggable {\n    if (e.dataTransfer != null) {\n      e.dataTransfer.setData('text', '');\n    }\n    e.dataTransfer.effectAllowed = 'move';\n    if ('function' === typeof DataTransfer.prototype.setDragImage) {\n      e.dataTransfer.setDragImage(new Image(), 0, 0);\n    } else {\n      // ie\n      (e.target as HTMLElement).style.display = 'none';\n      setTimeout(() => {\n        (e.target as HTMLElement).style.display = '';\n      });\n      e.stopPropagation();\n      return;\n    }\n    e.stopPropagation();\n    return this;\n  }\n\n  /** @internal */\n  private _getDragOffset(event: DragEvent, el: HTMLElement, parent: HTMLElement): DragOffset {\n\n    // in case ancestor has transform/perspective css properties that change the viewpoint\n    let xformOffsetX = 0;\n    let xformOffsetY = 0;\n    if (parent) {\n      const testEl = document.createElement('div');\n      DDUtils.addElStyles(testEl, {\n        opacity: '0',\n        position: 'fixed',\n        top: 0 + 'px',\n        left: 0 + 'px',\n        width: '1px',\n        height: '1px',\n        zIndex: '-999999',\n      });\n      parent.appendChild(testEl);\n      const testElPosition = testEl.getBoundingClientRect();\n      parent.removeChild(testEl);\n      xformOffsetX = testElPosition.left;\n      xformOffsetY = testElPosition.top;\n      // TODO: scale ?\n    }\n\n    const targetOffset = el.getBoundingClientRect();\n    return {\n      left: targetOffset.left,\n      top: targetOffset.top,\n      offsetLeft: - event.clientX + targetOffset.left - xformOffsetX,\n      offsetTop: - event.clientY + targetOffset.top - xformOffsetY,\n      width: targetOffset.width,\n      height: targetOffset.height\n    };\n  }\n\n  /** @internal TODO: set to public as called by DDDroppable! */\n  public ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const offset = this.helper.getBoundingClientRect();\n    return {\n      position: { //Current CSS position of the helper as { top, left } object\n        top: offset.top - containmentRect.top,\n        left: offset.left - containmentRect.left\n      }\n      /* not used by GridStack for now...\n      helper: [this.helper], //The object arr representing the helper that's being dragged.\n      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n      */\n    };\n  }\n}\n\n\n","// dd-droppable.ts 3.1.2 @preserve\n\n/**\n * https://gridstackjs.com/\n * (c) 2020 rhlin, Alain Dumesny\n * gridstack.js may be freely distributed under the MIT license.\n*/\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { DDUtils } from './dd-utils';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui) => void;\n  over?: (event: DragEvent, ui) => void;\n  out?: (event: DragEvent, ui) => void;\n}\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n  public el: HTMLElement;\n  public option: DDDroppableOpt;\n\n  /** @internal */\n  private acceptable: boolean = null;\n\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._dragEnter = this._dragEnter.bind(this);\n    this._dragOver = this._dragOver.bind(this);\n    this._dragLeave = this._dragLeave.bind(this);\n    this._drop = this._drop.bind(this);\n\n    this.el.classList.add('ui-droppable');\n    this.el.addEventListener('dragenter', this._dragEnter);\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (!this.disabled) { return; }\n    super.enable();\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('dragenter', this._dragEnter);\n  }\n\n  public disable(): void {\n    if (this.disabled) { return; }\n    super.disable();\n    this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('dragenter', this._dragEnter);\n  }\n\n  public destroy(): void {\n    this.el.classList.remove('ui-droppable');\n    if (this.disabled) {\n      this.el.classList.remove('ui-droppable-disabled');\n      this.el.removeEventListener('dragenter', this._dragEnter);\n      this.el.removeEventListener('dragover', this._dragOver);\n      this.el.removeEventListener('drop', this._drop);\n      this.el.removeEventListener('dragleave', this._dragLeave);\n    }\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  private _dragEnter(event: DragEvent): void {\n    this.el.removeEventListener('dragenter', this._dragEnter);\n    this.acceptable = this._canDrop();\n    if (this.acceptable) {\n      event.preventDefault();\n      const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dropover' });\n      if (this.option.over) {\n        this.option.over(ev, this._ui(DDManager.dragElement))\n      }\n      this.triggerEvent('dropover', ev);\n      this.el.addEventListener('dragover', this._dragOver);\n      this.el.addEventListener('drop', this._drop);\n    }\n    this.el.classList.add('ui-droppable-over');\n    this.el.addEventListener('dragleave', this._dragLeave);\n  }\n\n  /** @internal called when an acceptable to drop item is being dragged over - do nothing but eat the event */\n  private _dragOver(event: DragEvent): void {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had acceptable item */\n  private _dragLeave(event: DragEvent): void {\n    if (this.el.contains(event.relatedTarget as HTMLElement)) { return; }\n    this._removeLeaveCallbacks();\n    if (this.acceptable) {\n      event.preventDefault();\n      const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dropout' });\n      if (this.option.out) {\n        this.option.out(ev, this._ui(DDManager.dragElement))\n      }\n      this.triggerEvent('dropout', ev);\n    }\n  }\n\n  /** @internal item is being dropped on us - call the client drop event */\n  private _drop(event: DragEvent): void {\n    if (!this.acceptable) { return; } // should not have received event...\n    event.preventDefault();\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n    this._removeLeaveCallbacks();\n  }\n\n  /** @internal called to remove callbacks when leaving or dropping */\n  private _removeLeaveCallbacks() {\n    this.el.removeEventListener('dragleave', this._dragLeave);\n    this.el.classList.remove('ui-droppable-over');\n    if (this.acceptable) {\n      this.el.removeEventListener('dragover', this._dragOver);\n      this.el.removeEventListener('drop', this._drop);\n    }\n    this.el.addEventListener('dragenter', this._dragEnter);\n  }\n\n  /** @internal */\n  private _canDrop(): boolean {\n    return DDManager.dragElement && (!this.accept || this.accept(DDManager.dragElement.el));\n  }\n\n  /** @internal */\n  private _setupAccept(): DDDroppable {\n    if (this.option.accept && typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => {\n        return el.matches(this.option.accept as string)\n      }\n    } else {\n      this.accept = this.option.accept as ((el: HTMLElement) => boolean);\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _ui(drag: DDDraggable) {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n","// dd-elements.ts 3.1.2 @preserve\n\n/**\n * https://gridstackjs.com/\n * (c) 2020 rhlin, Alain Dumesny\n * gridstack.js may be freely distributed under the MIT license.\n*/\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\nimport { GridItemHTMLElement } from './../types';\nimport { DDDraggable, DDDraggableOpt } from './dd-draggable';\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\n\nexport interface DDElementHost extends GridItemHTMLElement {\n  ddElement?: DDElement;\n}\n\nexport class DDElement {\n\n  static init(el: DDElementHost): DDElement {\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\n    return el.ddElement;\n  }\n\n  public el: DDElementHost;\n  public ddDraggable?: DDDraggable;\n  public ddDroppable?: DDDroppable;\n  public ddResizable?: DDResizable;\n\n  constructor(el: DDElementHost) {\n    this.el = el;\n  }\n\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\n    }\n    return this;\n  }\n\n  public off(eventName: string): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\n    }\n    return this;\n  }\n\n  public setupDraggable(opts: DDDraggableOpt): DDElement {\n    if (!this.ddDraggable) {\n      this.ddDraggable = new DDDraggable(this.el, opts);\n    } else {\n      this.ddDraggable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDraggable(): DDElement {\n    if (this.ddDraggable) {\n      this.ddDraggable.destroy();\n      delete this.ddDraggable;\n    }\n    return this;\n  }\n\n  public setupResizable(opts: DDResizableOpt): DDElement {\n    if (!this.ddResizable) {\n      this.ddResizable = new DDResizable(this.el, opts);\n    } else {\n      this.ddResizable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanResizable(): DDElement {\n    if (this.ddResizable) {\n      this.ddResizable.destroy();\n      delete this.ddResizable;\n    }\n    return this;\n  }\n\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\n    if (!this.ddDroppable) {\n      this.ddDroppable = new DDDroppable(this.el, opts);\n    } else {\n      this.ddDroppable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDroppable(): DDElement {\n    if (this.ddDroppable) {\n      this.ddDroppable.destroy();\n      delete this.ddDroppable;\n    }\n    return this;\n  }\n}\n","// dd-manager.ts 3.1.2 @preserve\n\n/**\n * https://gridstackjs.com/\n * (c) 2020 rhlin, Alain Dumesny\n * gridstack.js may be freely distributed under the MIT license.\n*/\nimport { DDDraggable } from './dd-draggable';\n\nexport class DDManager {\n  static dragElement: DDDraggable;\n}\n","// dd-resizable-handle.ts 3.1.2 @preserve\n\n/**\n * https://gridstackjs.com/\n * (c) 2020 rhlin, Alain Dumesny\n * gridstack.js may be freely distributed under the MIT license.\n*/\nexport interface DDResizableHandleOpt {\n  start?: (event) => void;\n  move?: (event) => void;\n  stop?: (event) => void;\n}\n\nexport class DDResizableHandle {\n  /** @internal */\n  private el: HTMLElement;\n  /** @internal */\n  private host: HTMLElement;\n  /** @internal */\n  private option: DDResizableHandleOpt;\n  /** @internal */\n  private dir: string;\n  /** @internal */\n  private mouseMoving = false;\n  /** @internal */\n  private started = false;\n  /** @internal */\n  private mouseDownEvent: MouseEvent;\n  /** @internal */\n  private static prefix = 'ui-resizable-';\n\n  constructor(host: HTMLElement, direction: string, option: DDResizableHandleOpt) {\n    this.host = host;\n    this.dir = direction;\n    this.option = option;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n\n    this.init();\n  }\n\n  public init(): DDResizableHandle {\n    const el = document.createElement('div');\n    el.classList.add('ui-resizable-handle');\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n    el.style.zIndex = '100';\n    el.style.userSelect = 'none';\n    this.el = el;\n    this.host.appendChild(this.el);\n    this.el.addEventListener('mousedown', this._mouseDown);\n    return this;\n  }\n\n  public destroy(): DDResizableHandle {\n    this.host.removeChild(this.el);\n    return this;\n  }\n\n  /** @internal */\n  private _mouseDown(event: MouseEvent): void {\n    this.mouseDownEvent = event;\n    setTimeout(() => {\n      document.addEventListener('mousemove', this._mouseMove, true);\n      document.addEventListener('mouseup', this._mouseUp);\n      setTimeout(() => {\n        if (!this.mouseMoving) {\n          document.removeEventListener('mousemove', this._mouseMove, true);\n          document.removeEventListener('mouseup', this._mouseUp);\n          delete this.mouseDownEvent;\n        }\n      }, 300);\n    }, 100);\n  }\n\n  /** @internal */\n  private _mouseMove(event: MouseEvent): void {\n    if (!this.started && !this.mouseMoving) {\n      if (this._hasMoved(event, this.mouseDownEvent)) {\n        this.mouseMoving = true;\n        this._triggerEvent('start', this.mouseDownEvent);\n        this.started = true;\n      }\n    }\n    if (this.started) {\n      this._triggerEvent('move', event);\n    }\n  }\n\n  /** @internal */\n  private _mouseUp(event: MouseEvent): void {\n    if (this.mouseMoving) {\n      this._triggerEvent('stop', event);\n    }\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp);\n    this.mouseMoving = false;\n    this.started = false;\n    delete this.mouseDownEvent;\n  }\n\n  /** @internal */\n  private _hasMoved(event: MouseEvent, oEvent: MouseEvent): boolean {\n    const { clientX, clientY } = event;\n    const { clientX: oClientX, clientY: oClientY } = oEvent;\n    return (\n      Math.abs(clientX - oClientX) > 1\n      || Math.abs(clientY - oClientY) > 1\n    );\n  }\n\n  /** @internal */\n  private _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\n    if (this.option[name]) {\n      this.option[name](event);\n    }\n    return this;\n  }\n}\n","// dd-resizable.ts 3.1.2 @preserve\n\n/**\n * https://gridstackjs.com/\n * (c) 2020 rhlin, Alain Dumesny\n * gridstack.js may be freely distributed under the MIT license.\n*/\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { DDUtils } from './dd-utils';\nimport { DDUIData, Rect, Size } from '../types';\n\n// TODO: merge with DDDragOpt\nexport interface DDResizableOpt {\n  autoHide?: boolean;\n  handles?: string;\n  maxHeight?: number;\n  maxWidth?: number;\n  minHeight?: number;\n  minWidth?: number;\n  basePosition?: 'fixed' | 'absolute';\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  resize?: (event: Event, ui: DDUIData) => void;\n}\n\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\n\n  // have to be public else complains for HTMLElementExtendOpt ?\n  public el: HTMLElement;\n  public option: DDResizableOpt;\n\n  /** @internal */\n  private handlers: DDResizableHandle[];\n  /** @internal */\n  private originalRect: Rect;\n  /** @internal */\n  private temporalRect: Rect;\n  /** @internal */\n  private startEvent: MouseEvent;\n  /** @internal value saved in the same order as _originStyleProp[] */\n  private elOriginStyleVal: string[];\n  /** @internal */\n  private parentOriginStylePosition: string;\n  /** @internal */\n  private static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\n\n  constructor(el: HTMLElement, opts: DDResizableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n\n    this.el.classList.add('ui-resizable');\n    this._setupAutoHide();\n    this._setupHandlers();\n  }\n\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled) {\n      super.enable();\n      this.el.classList.remove('ui-resizable-disabled');\n    }\n  }\n\n  public disable(): void {\n    if (!this.disabled) {\n      super.disable();\n      this.el.classList.add('ui-resizable-disabled');\n    }\n  }\n\n  public destroy(): void {\n    this._removeHandlers();\n    if (this.option.autoHide) {\n      this.el.removeEventListener('mouseover', this._showHandlers);\n      this.el.removeEventListener('mouseout', this._hideHandlers);\n    }\n    this.el.classList.remove('ui-resizable');\n    delete this.el;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDResizableOpt): DDResizable {\n    let updateHandles = (opts.handles && opts.handles !== this.option.handles);\n    let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    if (updateHandles) {\n      this._removeHandlers();\n      this._setupHandlers();\n    }\n    if (updateAutoHide) {\n      this._setupAutoHide();\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _setupAutoHide(): DDResizable {\n    if (this.option.autoHide) {\n      this.el.classList.add('ui-resizable-autohide');\n      // use mouseover/mouseout instead of mouseenter mouseleave to get better performance;\n      this.el.addEventListener('mouseover', this._showHandlers);\n      this.el.addEventListener('mouseout', this._hideHandlers);\n    } else {\n      this.el.classList.remove('ui-resizable-autohide');\n      this.el.removeEventListener('mouseover', this._showHandlers);\n      this.el.removeEventListener('mouseout', this._hideHandlers);\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _showHandlers = () => {\n    this.el.classList.remove('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  private _hideHandlers = () => {\n    this.el.classList.add('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  private _setupHandlers(): DDResizable {\n    let handlerDirection = this.option.handles || 'e,s,se';\n    if (handlerDirection === 'all') {\n      handlerDirection = 'n,e,s,w,se,sw,ne,nw';\n    }\n    this.handlers = handlerDirection.split(',')\n      .map(dir => dir.trim())\n      .map(dir => new DDResizableHandle(this.el, dir, {\n        start: (event: MouseEvent) => {\n          this._resizeStart(event);\n        },\n        stop: (event: MouseEvent) => {\n          this._resizeStop(event);\n        },\n        move: (event: MouseEvent) => {\n          this._resizing(event, dir);\n        }\n      }));\n    return this;\n  }\n\n  /** @internal */\n  private _resizeStart(event: MouseEvent): DDResizable {\n    this.originalRect = this.el.getBoundingClientRect();\n    this.startEvent = event;\n    this._setupHelper();\n    this._applyChange();\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\n    if (this.option.start) {\n      this.option.start(ev, this._ui());\n    }\n    this.el.classList.add('ui-resizable-resizing');\n    this.triggerEvent('resizestart', ev);\n    return this;\n  }\n\n  /** @internal */\n  private _resizing(event: MouseEvent, dir: string): DDResizable {\n    this.temporalRect = this._getChange(event, dir);\n    this._applyChange();\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\n    if (this.option.resize) {\n      this.option.resize(ev, this._ui());\n    }\n    this.triggerEvent('resize', ev);\n    return this;\n  }\n\n  /** @internal */\n  private _resizeStop(event: MouseEvent): DDResizable {\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.el.classList.remove('ui-resizable-resizing');\n    this.triggerEvent('resizestop', ev);\n    this._cleanHelper();\n    delete this.startEvent;\n    delete this.originalRect;\n    delete this.temporalRect;\n    return this;\n  }\n\n  /** @internal */\n  private _setupHelper(): DDResizable {\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\n    if (window.getComputedStyle(this.el.parentElement).position.match(/static/)) {\n      this.el.parentElement.style.position = 'relative';\n    }\n    this.el.style.position = this.option.basePosition || 'absolute'; // or 'fixed'\n    this.el.style.opacity = '0.8';\n    this.el.style.zIndex = '1000';\n    return this;\n  }\n\n  /** @internal */\n  private _cleanHelper(): DDResizable {\n    DDResizable._originStyleProp.forEach((prop, i) => {\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\n    });\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n    return this;\n  }\n\n  /** @internal */\n  private _getChange(event: MouseEvent, dir: string): Rect {\n    const oEvent = this.startEvent;\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height,\n      left: this.originalRect.left,\n      top: this.originalRect.top\n    };\n    const offsetH = event.clientX - oEvent.clientX;\n    const offsetV = event.clientY - oEvent.clientY;\n\n    if (dir.indexOf('e') > -1) {\n      newRect.width += event.clientX - oEvent.clientX;\n    }\n    if (dir.indexOf('s') > -1) {\n      newRect.height += event.clientY - oEvent.clientY;\n    }\n    if (dir.indexOf('w') > -1) {\n      newRect.width -= offsetH;\n      newRect.left += offsetH;\n    }\n    if (dir.indexOf('n') > -1) {\n      newRect.height -= offsetV;\n      newRect.top += offsetV\n    }\n    const reshape = this._getReShapeSize(newRect.width, newRect.height);\n    if (newRect.width !== reshape.width) {\n      if (dir.indexOf('w') > -1) {\n        newRect.left += newRect.width - reshape.width;\n      }\n      newRect.width = reshape.width;\n    }\n    if (newRect.height !== reshape.height) {\n      if (dir.indexOf('n') > -1) {\n        newRect.top += newRect.height - reshape.height;\n      }\n      newRect.height = reshape.height;\n    }\n    return newRect;\n  }\n\n  /** @internal */\n  private _getReShapeSize(oWidth: number, oHeight: number): Size {\n    const maxWidth = this.option.maxWidth || oWidth;\n    const minWidth = this.option.minWidth || oWidth;\n    const maxHeight = this.option.maxHeight || oHeight;\n    const minHeight = this.option.minHeight || oHeight;\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n    return { width, height };\n  }\n\n  /** @internal */\n  private _applyChange(): DDResizable {\n    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\n    if (this.el.style.position === 'absolute') {\n      const containmentEl = this.el.parentElement;\n      const { left, top } = containmentEl.getBoundingClientRect();\n      containmentRect = { left, top, width: 0, height: 0 };\n    }\n    if (!this.temporalRect) return this;\n    Object.keys(this.temporalRect).forEach(key => {\n      const value = this.temporalRect[key];\n      this.el.style[key] = value - containmentRect[key] + 'px';\n    });\n    return this;\n  }\n\n  /** @internal */\n  private _removeHandlers(): DDResizable {\n    this.handlers.forEach(handle => handle.destroy());\n    delete this.handlers;\n    return this;\n  }\n\n  /** @internal */\n  private _ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const rect = this.temporalRect || this.originalRect;\n    return {\n      position: {\n        left: rect.left - containmentRect.left,\n        top: rect.top - containmentRect.top\n      },\n      size: {\n        width: rect.width,\n        height: rect.height\n      }\n      /* Gridstack ONLY needs position set above... keep around in case.\n      element: [this.el], // The object representing the element to be resized\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\n        left: this.originalRect.left - containmentRect.left,\n        top: this.originalRect.top - containmentRect.top\n      },\n      originalSize: { // The size represented as { width, height } before the resizable is resized\n        width: this.originalRect.width,\n        height: this.originalRect.height\n      }\n      */\n    };\n  }\n}\n","// dd-utils.ts 3.1.2 @preserve\n\n/**\n * https://gridstackjs.com/\n * (c) 2020 rhlin, Alain Dumesny\n * gridstack.js may be freely distributed under the MIT license.\n*/\n\nexport class DDUtils {\n\n  public static isEventSupportPassiveOption = ((() => {\n    let supportsPassive = false;\n    let passiveTest = () => {\n      // do nothing\n    };\n    document.addEventListener('test', passiveTest, {\n      get passive() {\n        supportsPassive = true;\n        return true;\n      }\n    });\n    document.removeEventListener('test', passiveTest);\n    return supportsPassive;\n  })());\n\n  public static clone(el: HTMLElement): HTMLElement {\n    const node = el.cloneNode(true) as HTMLElement;\n    node.removeAttribute('id');\n    return node;\n  }\n\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement | Node): void {\n    let parentNode: HTMLElement;\n    if (typeof parent === 'string') {\n      parentNode = document.querySelector(parent as string);\n    } else {\n      parentNode = parent as HTMLElement;\n    }\n    if (parentNode) {\n      parentNode.append(el);\n    }\n  }\n\n  public static setPositionRelative(el): void {\n    if (!(/^(?:r|a|f)/).test(window.getComputedStyle(el).position)) {\n      el.style.position = \"relative\";\n    }\n  }\n\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\n    if (styles instanceof Object) {\n      for (const s in styles) {\n        if (styles.hasOwnProperty(s)) {\n          if (Array.isArray(styles[s])) {\n            // support fallback value\n            (styles[s] as string[]).forEach(val => {\n              el.style[s] = val;\n            });\n          } else {\n            el.style[s] = styles[s];\n          }\n        }\n      }\n    }\n  }\n\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\n    const kbdProps = 'altKey,ctrlKey,metaKey,shiftKey'.split(',');\n    const ptProps = 'pageX,pageY,clientX,clientY,screenX,screenY'.split(',');\n    const evt = { type: info.type };\n    const obj = {\n      button: 0,\n      which: 0,\n      buttons: 1,\n      bubbles: true,\n      cancelable: true,\n      originEvent: e,\n      target: info.target ? info.target : e.target\n    }\n    if (e instanceof DragEvent) {\n      Object.assign(obj, { dataTransfer: e.dataTransfer });\n    }\n    DDUtils._copyProps(evt, e, kbdProps);\n    DDUtils._copyProps(evt, e, ptProps);\n    DDUtils._copyProps(evt, obj, Object.keys(obj));\n    return evt as unknown as T;\n  }\n\n  /** @internal */\n  private static _copyProps(dst: unknown, src: unknown, props: string[]): void {\n    for (let i = 0; i < props.length; i++) {\n      const p = props[i];\n      dst[p] = src[p];\n    }\n  }\n}\n","// gridstack-dd-native.ts 3.1.2 @preserve\n\n/**\n * https://gridstackjs.com/\n * (c) 2020 rhlin, Alain Dumesny\n * gridstack.js may be freely distributed under the MIT license.\n*/\nimport { DDManager } from './dd-manager';\nimport { DDElement, DDElementHost } from './dd-element';\n\nimport { GridStackElement } from '../gridstack';\nimport { GridStackDD, DDOpts, DDKey, DDDropOpt, DDCallback, DDValue } from '../gridstack-dd';\nimport { GridItemHTMLElement, DDDragInOpt } from '../types';\nimport { Utils } from '../utils';\n\n// export our base class (what user should use) and all associated types\nexport * from '../gridstack-dd';\n\n/**\n * HTML 5 Native DragDrop based drag'n'drop plugin.\n */\nexport class GridStackDDNative extends GridStackDD {\n\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\n      } else if (opts === 'destroy') {\n        dEl.ddResizable && dEl.cleanResizable();\n      } else if (opts === 'option') {\n        dEl.setupResizable({ [key]: value });\n      } else {\n        const grid = dEl.el.gridstackNode.grid;\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\n        dEl.setupResizable({\n          ...grid.opts.resizable,\n          ...{ handles: handles },\n          ...{\n            start: opts.start,\n            stop: opts.stop,\n            resize: opts.resize\n          }\n        });\n      }\n    });\n    return this;\n  }\n\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\n      } else if (opts === 'destroy') {\n        dEl.ddDraggable && dEl.cleanDraggable();\n      } else if (opts === 'option') {\n        dEl.setupDraggable({ [key]: value });\n      } else {\n        const grid = dEl.el.gridstackNode.grid;\n        dEl.setupDraggable({\n          ...grid.opts.draggable,\n          ...{\n            containment: (grid.opts._isNested && !grid.opts.dragOut)\n              ? grid.el.parentElement\n              : (grid.opts.draggable.containment || null),\n            start: opts.start,\n            stop: opts.stop,\n            drag: opts.drag\n          }\n        });\n      }\n    });\n    return this;\n  }\n\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\n    return this;\n  }\n\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): GridStackDDNative {\n    if (typeof opts.accept === 'function' && !opts._accept) {\n      opts._accept = opts.accept;\n      opts.accept = (el) => opts._accept(el);\n    }\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\n      } else if (opts === 'destroy') {\n        if (dEl.ddDroppable) { // error to call destroy if not there\n          dEl.cleanDroppable();\n        }\n      } else if (opts === 'option') {\n        dEl.setupDroppable({ [key]: value });\n      } else {\n        dEl.setupDroppable(opts);\n      }\n    });\n    return this;\n  }\n\n  /** true if element is droppable */\n  public isDroppable(el: DDElementHost): boolean {\n    return el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled;\n  }\n\n  /** true if element is draggable */\n  public isDraggable(el: DDElementHost): boolean {\n    return el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled;\n  }\n\n  /** true if element is draggable */\n  public isResizable(el: DDElementHost): boolean {\n    return el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled;\n  }\n\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl =>\n      dEl.on(name, (event: Event) => {\n        callback(\n          event,\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\n      })\n    );\n    return this;\n  }\n\n  public off(el: GridItemHTMLElement, name: string): GridStackDD {\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\n    return this;\n  }\n\n  /** @internal returns a list of DD elements, creating them on the fly by default */\n  private _getDDElements(els: GridStackElement, create = true): DDElement[] {\n    let hosts = Utils.getElements(els) as DDElementHost[];\n    if (!hosts.length) { return []; }\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\n    if (!create) { list.filter(d => d); } // remove nulls\n    return list;\n  }\n}\n\n// finally register ourself\nGridStackDD.registerPlugin(GridStackDDNative);\n","// index.html5.ts 3.1.2 - everything you need for a Grid that uses HTML5 native drag&drop (work in progress) @preserve\r\n\r\n// import './gridstack-poly.js';\r\n\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './gridstack-ddi';\r\nexport * from './gridstack';\r\n\r\nexport * from './h5/gridstack-dd-native';\r\n\r\n// declare module 'gridstack'; for umd ?\r\n","// utils.ts 3.1.2 @preserve\r\n\r\n/**\r\n * https://gridstackjs.com/\r\n * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov\r\n * gridstack.js may be freely distributed under the MIT license.\r\n*/\r\n\r\nimport { GridStackElement, GridStackWidget, GridStackNode, GridStackOptions, numberOrString } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **completely** removed in v1.0');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **completely** removed in v1.0');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **completely** removed in v1.0');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements */\r\n  static getElements(els: GridStackElement): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      let list = document.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = document.querySelectorAll('.' + els);\r\n        if (!list.length) { list = document.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element */\r\n  static getElement(els: GridStackElement): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      if (!els.length) { return null}\r\n      if (els[0] === '#') {\r\n        return document.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '.' || els[0] === '[') {\r\n        return document.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if(!isNaN(+els[0])) { // start with digit\r\n        return document.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id then class\r\n      let el = document.querySelector(els);\r\n      if (!el) { el = document.getElementById(els) }\r\n      if (!el) { el = document.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackWidget, b: GridStackWidget): boolean {\r\n    return !(a.x + a.w <= b.x || b.x + b.w <= a.x || a.y + a.h <= b.y || b.y + b.h <= a.y);\r\n  }\r\n\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir?: -1 | 1, column?: number): GridStackNode[] {\r\n    if (!column) {\r\n      let widths = nodes.map(n => n.x + n.w);\r\n      column = Math.max(...widths);\r\n    }\r\n\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => (b.x + b.y * column)-(a.x + a.y * column));\r\n    else\r\n      return nodes.sort((b, a) => (b.x + b.y * column)-(a.x + a.y * column));\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (!el || !el.parentNode) return;\r\n    el.parentNode.removeChild(el);\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n      if (!match) {\r\n        throw new Error('Invalid height');\r\n      }\r\n      unit = match[2] || 'px';\r\n      h = parseFloat(match[1]);\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) { return; }\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  { return a == b; }\r\n    if (typeof a !== typeof b) { return false; }\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) { return false; }\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) { return false; }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (val && typeof val === 'object') {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      } else if (val === b[key] || key[0] === '_') { delete a[key] }\r\n    }\r\n  }\r\n\r\n  /** return the closest parent matching the given class */\r\n  static closestByClass(el: HTMLElement, name: string): HTMLElement {\r\n\r\n    while(el = el.parentElement) {\r\n      if (el.classList.contains(name)) return el;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** delay calling the given function by certain amount of time */\r\n  static throttle(callback: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        callback.apply(this, args);\r\n        isWaiting = true;\r\n        setTimeout(() => isWaiting = false, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static getScrollParent(el: HTMLElement): HTMLElement {\r\n    let returnEl;\r\n    if (el === null) {\r\n      returnEl = null;\r\n    } else if (el.scrollHeight > el.clientHeight) {\r\n      returnEl = el;\r\n    } else {\r\n      returnEl = this.getScrollParent(el.parentElement);\r\n    }\r\n    return returnEl;\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollParent(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(117);\n"],"sourceRoot":""}